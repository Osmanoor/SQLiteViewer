================================================================
RepopackPy Output File
================================================================

This file was generated by RepopackPy on: 2025-03-07T03:48:32.671460

Purpose:
--------
This file contains a packed representation of the entire repository's contents.
It is designed to be easily consumable by AI systems for analysis, code review,
or other automated processes.

File Format:
------------
The content is organized as follows:
1. This header section
2. Repository structure
3. Multiple file entries, each consisting of:
  a. A separator line (================)
  b. The file path (File: path/to/file)
  c. Another separator line
  d. The full contents of the file
  e. A blank line

Usage Guidelines:
-----------------
1. This file should be treated as read-only. Any changes should be made to the
  original repository files, not this packed version.
2. When processing this file, use the separators and "File:" markers to
  distinguish between different files in the repository.
3. Be aware that this file may contain sensitive information. Handle it with
  the same level of security as you would the original repository.

Notes:
------
- Some files may have been excluded based on .gitignore rules and RepopackPy's
  configuration.
- Binary files are not included in this packed representation. Please refer to
  the Repository Structure section for a complete list of file paths, including
  binary files.

For more information about RepopackPy, visit: https://github.com/abinthomasonline/repopack-py

================================================================
Repository Structure
================================================================
AA_BetterReplays.cs
AA_BetterReplaysUC.xaml
AA_BetterReplaysUC.xaml.cs
AA_DistinctRoster.cs
AA_DistinctRosterDialog.xaml
AA_DistinctRosterDialog.xaml.cs
AA_DistinctRosterFilterControl.xaml
AA_DistinctRosterFilterControl.xaml.cs
A_RosterWithCount.cs
A_RosterWithCountUC.xaml
A_RosterWithCountUC.xaml.cs
App.config
App.xaml
App.xaml.cs
AssemblyInfo.cs
BetterKillfeed.cs
BetterKillfeedDialog.xaml
BetterKillfeedDialog.xaml.cs
BetterKillfeedFilterControl.xaml
BetterKillfeedFilterControl.xaml.cs
BetterReplaysDialog.xaml
BetterReplaysDialog.xaml.cs
Database.db
DatabaseManager.cs
DatabaseManager2.cs
MainWindow.xaml
MainWindow.xaml.cs
Overlays\bluex.png
Overlays\ghost.png
Overlays\glow.png
Overlays\redglow.png
Overlays\redx.png
Properties\Resources.Designer.cs
Properties\Resources.resx
Properties\Settings.Designer.cs
Properties\Settings.settings
Resources\Character_AbstractMirror_Rogue.png
Resources\Character_AccentWall.png
Resources\Colors.xaml
Resources\Converters.cs
Resources\Styles.xaml
Resources\bluex.png
Resources\bot.png
Resources\ghost.png
Resources\glow.png
Resources\home.png
Resources\redglow.png
Resources\redx.png
Resources\rocket.png
Resources\screen.png
Resources\settings.png
SQLiteViewer.csproj
Templates\IconCard.xaml
Templates\IconCard.xaml.cs
bot.ico

================================================================
Repository Files
================================================================

================
File: AA_BetterReplays.cs
================
using System;
using System.ComponentModel;

namespace SQLiteViewer  // Replace with your actual project namespace if different
{
    public class AA_BetterReplays : INotifyPropertyChanged
    {
        public event PropertyChangedEventHandler PropertyChanged;

        private string fileName;
        public string FileName
        {
            get => fileName;
            set
            {
                fileName = value;
                OnPropertyChanged(nameof(FileName));
            }
        }

        private DateTime replayDate;
        public DateTime ReplayDate
        {
            get => replayDate;
            set
            {
                replayDate = value;
                OnPropertyChanged(nameof(ReplayDate));
            }
        }

        private string playlist;
        public string Playlist
        {
            get => playlist;
            set
            {
                playlist = value;
                OnPropertyChanged(nameof(Playlist));
            }
        }

        private string teammates;
        public string Teammates
        {
            get => teammates;
            set
            {
                teammates = value;
                OnPropertyChanged(nameof(Teammates));
            }
        }

        private double gameTime;
        public double GameTime
        {
            get => gameTime;
            set
            {
                gameTime = value;
                OnPropertyChanged(nameof(GameTime));
            }
        }

        private double season;
        public double Season
        {
            get => season;
            set
            {
                season = value;
                OnPropertyChanged(nameof(Season));
            }
        }

        private int botCount;
        public int BotCount
        {
            get => botCount;
            set
            {
                botCount = value;
                OnPropertyChanged(nameof(BotCount));
            }
        }

        private int kills;
        public int Kills
        {
            get => kills;
            set
            {
                kills = value;
                OnPropertyChanged(nameof(Kills));
            }
        }

        private int? botKills;
        public int? BotKills
        {
            get => botKills;
            set
            {
                botKills = value;
                OnPropertyChanged(nameof(BotKills));
            }
        }

        private int placement;
        public int Placement
        {
            get => placement;
            set
            {
                placement = value;
                OnPropertyChanged(nameof(Placement));
            }
        }

        private string ended;
        public string Ended
        {
            get => ended;
            set
            {
                ended = value;
                OnPropertyChanged(nameof(Ended));
            }
        }

        protected virtual void OnPropertyChanged(string propertyName)
        {
            PropertyChanged?.Invoke(this, new PropertyChangedEventArgs(propertyName));
        }
    }
}

================
File: AA_BetterReplaysUC.xaml
================
<UserControl
    x:Class="SQLiteViewer.AA_BetterReplaysUC"
    xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
    xmlns:d="http://schemas.microsoft.com/expression/blend/2008"
    xmlns:local="clr-namespace:SQLiteViewer"
    xmlns:materialDesign="http://materialdesigninxaml.net/winfx/xaml/themes"
    xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
    d:DesignHeight="450"
    d:DesignWidth="800"
    Loaded="UserControl_Loaded"
    mc:Ignorable="d">
    <Grid>
        <Grid.RowDefinitions>
            <RowDefinition Height="auto" />
            <RowDefinition Height="auto" />
            <RowDefinition Height="*" />
            <RowDefinition Height="auto" />
        </Grid.RowDefinitions>
        <TextBlock Style="{StaticResource H1Style}" Text="Better Replay" />
        <StackPanel
            Grid.Row="1"
            HorizontalAlignment="Center"
            Orientation="Horizontal">
            <!--  Filter Buttons  -->
            <ListBox
                HorizontalAlignment="Center"
                VerticalAlignment="Center"
                SelectionChanged="ListBox_SelectionChanged"
                Style="{StaticResource MaterialDesignFilterChipSecondaryListBox}">
                <ListBoxItem
                    x:Name="DateFilter"
                    Content="Date"
                    Visibility="Collapsed" />
                <ListBoxItem
                    x:Name="Kills"
                    Content="Kills"
                    Visibility="Collapsed" />
                <ListBoxItem
                    x:Name="PlaylistFilter"
                    Content="Playlist"
                    Unselected="PlaylistFilter_Unselected"
                    Visibility="Collapsed" />
                <ListBoxItem
                    x:Name="SeasonFilter"
                    Content="Season"
                    Visibility="Collapsed" />
                <ListBoxItem
                    x:Name="PlacementFilter"
                    Content="Placement"
                    Visibility="Collapsed" />
                <ListBoxItem
                    x:Name="TeammateFilter"
                    Content="Teammate"
                    Unselected="TeammateFilter_Unselected"
                    Visibility="Collapsed" />
            </ListBox>
            <Button
                Margin="0"
                Click="Button_Click"
                Style="{StaticResource StarButtonStyle}"
                Visibility="Collapsed">
                <materialDesign:PackIcon Kind="Gear" Style="{StaticResource IconStyle}" />
            </Button>
        </StackPanel>

        <!--  DataGrid for displaying data  -->
        <DataGrid
            x:Name="DataGridView"
            Grid.Row="2"
            ColumnHeaderStyle="{StaticResource HeaderStyle}"
            RowBackground="{StaticResource MaterialDesignDarkSeparatorBackground}"
            RowStyle="{StaticResource MaterialDesignDataGridRow}"
            SelectedCellsChanged="DataGridView_SelectedCellsChanged"
            Sorting="DataGridView_Sorting"
            Style="{StaticResource DataGridStyle}">
            <DataGrid.Columns>

                <DataGridTextColumn Binding="{Binding FileName}" Header="File Name" />
                <DataGridTextColumn Binding="{Binding ReplayDate}" Header="Replay Date" />
                <DataGridTextColumn Binding="{Binding Playlist}" Header="Playlist" />
                <DataGridTextColumn Binding="{Binding Teammates}" Header="Teammates" />
                <DataGridTextColumn Binding="{Binding GameTime}" Header="Game Time" />
                <DataGridTextColumn Binding="{Binding Season}" Header="Season" />
                <DataGridTextColumn Binding="{Binding BotCount}" Header="Bot Count" />
                <DataGridTextColumn Binding="{Binding Kills}" Header="Kills" />
                <DataGridTextColumn Binding="{Binding BotKills}" Header="Bot Kills" />
                <DataGridTextColumn Binding="{Binding Placement}" Header="Placement" />
                <DataGridTextColumn Binding="{Binding Ended}" Header="Ended" />
            </DataGrid.Columns>
            <!--<DataGrid.Columns>
            -->
            <!--  String Column  -->
            <!--
                <DataGridTextColumn Binding="{Binding StringField}" Header="String Column" />

            -->
            <!--  Integer Column  -->
            <!--
                <DataGridTextColumn Binding="{Binding IntField}" Header="Integer Column" />

            -->
            <!--  Boolean Column with a Checkbox  -->
            <!--
                <DataGridCheckBoxColumn Binding="{Binding BoolField}" Header="Boolean Column" />

            -->
            <!--  Image Column  -->
            <!--
                <DataGridTemplateColumn Header="Image Column">
                    <DataGridTemplateColumn.CellTemplate>
                        <DataTemplate>
                            <Image
                                Width="50"
                                Height="50"
                                Source="{Binding ImageField, Mode=OneWay, IsAsync=True}" />
                        </DataTemplate>
                    </DataGridTemplateColumn.CellTemplate>
                </DataGridTemplateColumn>
            </DataGrid.Columns>-->

        </DataGrid>
        <!--  Pagination Controls  -->
        <StackPanel
            Grid.Row="3"
            Margin="10"
            HorizontalAlignment="Center"
            VerticalAlignment="Bottom"
            Orientation="Horizontal">
            <Button
                Click="FirstPage_Click"
                Content="First"
                Style="{StaticResource MaterialDesignFlatButton}" />
            <Button
                Click="PreviousPage_Click"
                Content="Previous"
                Style="{StaticResource MaterialDesignFlatButton}" />
            <TextBox
                x:Name="PageNumberTextBox"
                Width="50"
                Height="40"
                Foreground="{StaticResource foreground}"
                IsReadOnly="True"
                Style="{StaticResource MaterialDesignTextBox}"
                TextAlignment="Center" />
            <Button
                Click="NextPage_Click"
                Content="Next"
                Style="{StaticResource MaterialDesignFlatButton}" />
            <Button
                Click="LastPage_Click"
                Content="Last"
                Style="{StaticResource MaterialDesignFlatButton}" />
        </StackPanel>
    </Grid>
</UserControl>

================
File: AA_BetterReplaysUC.xaml.cs
================
using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using System.Windows;
using System.Windows.Controls;
using System.Windows.Data;
using System.Windows.Documents;
using System.Windows.Input;
using System.Windows.Media;
using System.Windows.Media.Imaging;
using System.Windows.Navigation;
using MaterialDesignThemes.Wpf;
using SQLitePCL;
using System.IO;
using SQLiteViewer.Properties;
using System.ComponentModel;
using static MaterialDesignThemes.Wpf.Theme;

namespace SQLiteViewer
{
    /// <summary>
    /// Interaction logic for AA_BetterReplaysUC.xaml
    /// </summary>
    public partial class AA_BetterReplaysUC : UserControl
    {
        MainWindow mainWindow;
        public ObservableCollection<AA_BetterReplays> Replays { get; set; }
        public ObservableCollection<AA_BetterReplays> _pagedDataCollection { get; set; }
        private ObservableCollection<AA_BetterReplays> originalReplays;
        private readonly DatabaseManager dbManager;

        private int _pageSize = 10;
        private int _currentPageIndex = 0;
        private int _totalPages;
        private string _orderBy = "";
        private bool _ascending = true;
        private string _teammate = "";
        private string _playlist = "";

        public AA_BetterReplaysUC()
        {
            InitializeComponent();
            this.DataContext = this;

            // Initialize SQLitePCL.Batteries
            Batteries_V2.Init();
            string dbPath = Path.Combine(AppDomain.CurrentDomain.BaseDirectory, "Database.db");
            dbManager = new DatabaseManager(dbPath);

            // Initialize paged data collection
            originalReplays = new ObservableCollection<AA_BetterReplays>();
            Replays = new ObservableCollection<AA_BetterReplays>(originalReplays);
            _pagedDataCollection = new ObservableCollection<AA_BetterReplays>();

            // Calculate total pages
            _totalPages = ((10 + _pageSize - 1) / _pageSize);  // Rounded up division

            // Display the first page
            LoadPage(0);
        }

        // Method to load a specific page
        private void LoadPage(int pageIndex)
        {
            if (pageIndex < 0 || pageIndex >= _totalPages)
                return;

            _pagedDataCollection.Clear();
            (var pageData,var total_rows) = dbManager.FilterAndPaginateBetterReplays(teammate: _teammate, playlist: _playlist, orderBy: _orderBy, ascending: _ascending, pageIndex, _pageSize);
            _totalPages = ((total_rows + _pageSize - 1) / _pageSize);  // Rounded up division

            foreach (var item in pageData)
            {
                _pagedDataCollection.Add(item);
            }

            DataGridView.ItemsSource = _pagedDataCollection;
            _currentPageIndex = pageIndex;

            // Update the page number display
            PageNumberTextBox.Text = (_currentPageIndex + 1).ToString();
        }
        // Event handler for "First" button
        private void FirstPage_Click(object sender, RoutedEventArgs e)
        {
            LoadPage(0);
        }

        // Event handler for "Previous" button
        private void PreviousPage_Click(object sender, RoutedEventArgs e)
        {
            if (_currentPageIndex > 0)
            {
                LoadPage(_currentPageIndex - 1);
            }
        }

        // Event handler for "Next" button
        private void NextPage_Click(object sender, RoutedEventArgs e)
        {
            if (_currentPageIndex < _totalPages - 1)
            {
                LoadPage(_currentPageIndex + 1);
            }
        }

        // Event handler for "Last" button
        private void LastPage_Click(object sender, RoutedEventArgs e)
        {
            LoadPage(_totalPages - 1);
        }


        // Method to apply the filter and refresh the DataGrid
        private void ApplyFilters()
        {
            var filteredReplays = originalReplays.AsEnumerable();

            // Date Range Filter
            if (DateFilter.IsSelected)
            {
                filteredReplays = filteredReplays.Where(r => r.ReplayDate >= Settings.Default.BetterReplayDateFrom && r.ReplayDate <= Settings.Default.BetterReplayDateTo);
            }

            // Playlist Filter
            if (PlaylistFilter.IsSelected)
            {
                filteredReplays = filteredReplays.Where(r => r.Playlist == Settings.Default.BetterReplayPlaylist);
            }

            // Kills Range Filter
            if (Kills.IsSelected)
            {
                filteredReplays = filteredReplays.Where(r => r.Kills >= Settings.Default.BetterReplayKillsFrom && r.Kills <= Settings.Default.BetterReplayKillsTo);
            }

            // Season Filter
            if (SeasonFilter.IsSelected)
            {
                filteredReplays = filteredReplays.Where(r => r.Season == Settings.Default.BetterReplaySeason);
            }

            // Placement Filter
            if (PlacementFilter.IsSelected)
            {
                filteredReplays = filteredReplays.Where(r => r.Placement == Settings.Default.BetterReplayPlacement);
            }

            Replays = new ObservableCollection<AA_BetterReplays>(filteredReplays);
            LoadPage(0);
        }

        private void ListBox_SelectionChanged(object sender, SelectionChangedEventArgs e)
        {
            try
            {
                ApplyFilters();
            }
            catch (Exception ex)
            {

                throw;
            }
        }

        private async void Button_Click(object sender, RoutedEventArgs e)
        {
            await mainWindow.FilterDialogHost.ShowDialog(new BetterReplaysDialog());
        }

        private void UserControl_Loaded(object sender, RoutedEventArgs e)
        {
            mainWindow = (MainWindow)Application.Current.MainWindow;
        }

        private void DataGridView_Sorting(object sender, DataGridSortingEventArgs e)
        {
            e.Handled = true; // Cancel default sorting

            // Get the property name to sort by
            string sortBy = e.Column.SortMemberPath;

            // Check current sort direction
            ListSortDirection direction = e.Column.SortDirection ?? ListSortDirection.Ascending;
            _orderBy = sortBy;
            // Perform the custom sorting on the full data set
            if (direction == ListSortDirection.Ascending)
            {
                _ascending = true;
                e.Column.SortDirection = ListSortDirection.Descending;
            }
            else
            {
                _ascending = false;
                e.Column.SortDirection = ListSortDirection.Ascending;
            }

            // Load the current page after sorting
            LoadPage(0);
        }

        // Helper method to get the property value using reflection
        private object GetPropertyValue(object obj, string propertyName)
        {
            return obj.GetType().GetProperty(propertyName).GetValue(obj, null);
        }

        private void DataGridView_SelectedCellsChanged(object sender, SelectedCellsChangedEventArgs e)
        {
            if (DataGridView.SelectedCells.Count > 0)
            {
                var selectedCellInfo = e.AddedCells[0];
                var columnHeader = selectedCellInfo.Column.Header.ToString();
                var selectedCell = DataGridView.SelectedCells[0];
                var cellInfo = selectedCell.Item as AA_BetterReplays;  // Replace with your data type

                if (cellInfo != null)
                {
                    // Check which column was selected and apply the respective filter
                    switch (selectedCell.Column.Header.ToString())
                    {
                        case "Playlist":
                            ApplyPlaylistFilter( cellInfo.Playlist);  // Assuming Playlist is a string
                            break;

                        case "Teammates":
                            ApplyTeammatesFilter(cellInfo.Teammates);  // Assuming Teammates is a string
                            break;

                        case "File Name":
                            mainWindow.UnSelectAll();
                            mainWindow.NavigateTo(new A_RosterWithCountUC(fileName:cellInfo.FileName));
                            //ApplyFileNameFilter(cellInfo.FileName);  // Assuming FileName is a string
                            break;

                        case "Replay Date":
                            mainWindow.UnSelectAll();
                            mainWindow.NavigateTo(new A_RosterWithCountUC(replayDate: cellInfo.ReplayDate));
                            //ApplyReplayDateFilter(cellInfo.ReplayDate);  // Assuming ReplayDate is a DateTime
                            break;
                    }
                }
            }
        }
        // Filter by Playlist
        private void ApplyPlaylistFilter(string playlistValue)
        {
            _playlist = playlistValue;
            PlaylistFilter.Visibility = Visibility.Visible;
            PlaylistFilter.Content = $"Playlist: {playlistValue}";
            PlaylistFilter.IsSelected = true;
            LoadPage(0);
        }

        // Filter by Teammates
        private void ApplyTeammatesFilter(string teammatesValue)
        {
            _teammate = teammatesValue;
            TeammateFilter.Visibility = Visibility.Visible;
            TeammateFilter.Content = $"Teammate: {teammatesValue}";
            TeammateFilter.IsSelected = true;
            LoadPage(0);
        }

        // Filter by FileName
        private void ApplyFileNameFilter(string fileNameValue)
        {
            
        }

        // Filter by ReplayDate
        private void ApplyReplayDateFilter(DateTime replayDateValue)
        {
            
        }

        private void PlaylistFilter_Unselected(object sender, RoutedEventArgs e)
        {
            PlaylistFilter.Visibility = Visibility.Collapsed;
            _playlist = "";
            LoadPage(0);
        }

        private void TeammateFilter_Unselected(object sender, RoutedEventArgs e)
        {
            TeammateFilter.Visibility = Visibility.Collapsed;
            _teammate = "";
            LoadPage(0);
        }
    }
}

================
File: AA_DistinctRoster.cs
================
using System;
using System.Collections.ObjectModel;
using System.ComponentModel;
using System.Linq;

namespace SQLiteViewer
{
    public class AA_DistinctRoster : INotifyPropertyChanged
{
    public int Num { get; set; }
    public DateTime Date { get; set; }
    public string Playlist { get; set; }
    public string PlayerId { get; set; }
    public string DisplayName { get; set; }
    public int Lvl { get; set; }
    public int Place { get; set; }
    public int Anon { get; set; }
    public string Platform { get; set; }
    public int Team { get; set; }
    public int? Kills { get; set; }
    public int? BotKills { get; set; }
    public int Crowns { get; set; }
    public string TeamMate { get; set; }
    public string Skin { get; set; }
    public int Count { get; set; }
    public string MetK { get; set; }
    public string MetD { get; set; }
    public string Season { get; set; }

    public event PropertyChangedEventHandler PropertyChanged;

    protected virtual void OnPropertyChanged(string propertyName)
    {
        PropertyChanged?.Invoke(this, new PropertyChangedEventArgs(propertyName));
    }

    public static IEnumerable<AA_DistinctRoster> FilterByLvlRange(IEnumerable<AA_DistinctRoster> data, int minLvl, int maxLvl)
    {
        return new ObservableCollection<AA_DistinctRoster>(data.Where(item => item.Lvl >= minLvl && item.Lvl <= maxLvl));
    }

    public static ObservableCollection<AA_DistinctRoster> FilterByPlaceRange(IEnumerable<AA_DistinctRoster> data, int minPlace, int maxPlace)
    {
        return new ObservableCollection<AA_DistinctRoster>(data.Where(item => item.Place >= minPlace && item.Place <= maxPlace));
    }

    public static ObservableCollection<AA_DistinctRoster> FilterByPlatform(IEnumerable<AA_DistinctRoster> data, string platform)
    {
        return new ObservableCollection<AA_DistinctRoster>(data.Where(item => item.Platform == platform));
    }

    public static ObservableCollection<AA_DistinctRoster> FilterByKills(IEnumerable<AA_DistinctRoster> data, int minKills)
    {
        return new ObservableCollection<AA_DistinctRoster>(data.Where(item => item.Kills.HasValue && item.Kills.Value >= minKills));
    }

    public static ObservableCollection<AA_DistinctRoster> FilterByTeam(IEnumerable<AA_DistinctRoster> data, int team)
    {
        return new ObservableCollection<AA_DistinctRoster>(data.Where(item => item.Team == team));
    }
}
}

================
File: AA_DistinctRosterDialog.xaml
================
<UserControl
    x:Class="SQLiteViewer.AA_DistinctRosterDialog"
    xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
    xmlns:d="http://schemas.microsoft.com/expression/blend/2008"
    xmlns:local="clr-namespace:SQLiteViewer"
    xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
    d:DesignHeight="450"
    d:DesignWidth="800"
    mc:Ignorable="d">
    <Border
        Padding="0"
        Background="{StaticResource Background}"
        CornerRadius="20">
        <StackPanel>
            <StackPanel Margin="20" Orientation="Horizontal">
                <TextBlock Style="{StaticResource H3Style}" Text="Level Min:" />
                <TextBox
                    x:Name="MinLvlTextBox"
                    Width="100"
                    Margin="10" />
                <TextBlock Style="{StaticResource H3Style}" Text="Max:" />
                <TextBox
                    x:Name="MaxLvlTextBox"
                    Width="100"
                    Margin="10" />
            </StackPanel>
            <StackPanel Margin="20" Orientation="Horizontal">
                <TextBlock Style="{StaticResource H3Style}" Text="Place Min:" />
                <TextBox
                    x:Name="MinPlaceTextBox"
                    Width="100"
                    Margin="10" />
                <TextBlock Style="{StaticResource H3Style}" Text="Max:" />
                <TextBox
                    x:Name="MaxPlaceTextBox"
                    Width="100"
                    Margin="10" />
            </StackPanel>
            <StackPanel Margin="20" Orientation="Horizontal">
                <TextBlock Style="{StaticResource H3Style}" Text="Kills:" />
                <TextBox
                    x:Name="MinKillsTextBox"
                    Width="100"
                    Margin="10" />
            </StackPanel>
            <StackPanel Margin="20" Orientation="Horizontal">
                <TextBlock Style="{StaticResource H3Style}" Text="Team:" />
                <TextBox
                    x:Name="TeamTextBox"
                    Width="100"
                    Margin="10" />

            </StackPanel>
            <StackPanel Margin="20" Orientation="Horizontal">
                <TextBlock Style="{StaticResource H3Style}" Text="Platform" />
                <ComboBox
                    x:Name="PlatformComboBox"
                    Width="100"
                    Margin="10"
                    Style="{StaticResource MaterialDesignOutlinedComboBox}" />
            </StackPanel>
            <Grid
                Margin="20"
                HorizontalAlignment="Center"
                VerticalAlignment="Bottom">
                <Button
                    x:Name="Savebtn"
                    Click="Savebtn_Click"
                    Content="Save"
                    IsDefault="True"
                    Style="{StaticResource MaterialDesignFlatButton}" />
            </Grid>
        </StackPanel>
    </Border>
</UserControl>

================
File: AA_DistinctRosterDialog.xaml.cs
================
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using System.Windows;
using System.Windows.Controls;
using System.Windows.Data;
using System.Windows.Documents;
using System.Windows.Input;
using System.Windows.Media;
using System.Windows.Media.Imaging;
using System.Windows.Navigation;
using System.Windows.Shapes;
using MaterialDesignThemes.Wpf;
using SQLiteViewer.Properties;

namespace SQLiteViewer
{
    /// <summary>
    /// Interaction logic for BetterReplaysDialog.xaml
    /// </summary>
    public partial class AA_DistinctRosterDialog : UserControl
    {
        public AA_DistinctRosterDialog()
        {
            InitializeComponent();
            var playlist = new List<string>(["PS5", "PSN", "WIN", "XBL", "XSX"]);
            MinLvlTextBox.Text = Settings.Default.MinLvlTextBox.ToString();
            MaxLvlTextBox.Text = Settings.Default.MaxLvlTextBox.ToString();
            MinPlaceTextBox.Text = Settings.Default.MinPlaceTextBox.ToString();
            MaxPlaceTextBox.Text = Settings.Default.MaxPlaceTextBox.ToString();
            PlatformComboBox.ItemsSource = playlist;
            PlatformComboBox.SelectedValue = Settings.Default.PlatformComboBox;
            MinKillsTextBox.Text = Settings.Default.MinKillsTextBox.ToString();
            TeamTextBox.Text = Settings.Default.TeamTextBox.ToString();
        }

        private void Savebtn_Click(object sender, RoutedEventArgs e)
        {
            Settings.Default.MinLvlTextBox = Convert.ToInt32(MinLvlTextBox.Text);
            Settings.Default.MaxLvlTextBox = Convert.ToInt32(MaxLvlTextBox.Text);
            Settings.Default.MinPlaceTextBox = Convert.ToInt32(MinPlaceTextBox.Text);
            Settings.Default.MaxPlaceTextBox = Convert.ToInt32(MaxPlaceTextBox.Text);
            Settings.Default.MinKillsTextBox = Convert.ToInt32(MinKillsTextBox.Text);
            Settings.Default.TeamTextBox = Convert.ToInt32(TeamTextBox.Text);
            Settings.Default.PlatformComboBox = (String)PlatformComboBox.SelectedValue??"PS5";
            Settings.Default.Save();
            DialogHost.CloseDialogCommand.Execute(true, null);
        }
    }
}

================
File: AA_DistinctRosterFilterControl.xaml
================
<UserControl
    x:Class="SQLiteViewer.AA_DistinctRosterFilterControl"
    xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
    xmlns:d="http://schemas.microsoft.com/expression/blend/2008"
    xmlns:local="clr-namespace:SQLiteViewer"
    xmlns:materialDesign="http://materialdesigninxaml.net/winfx/xaml/themes"
    xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
    d:DesignHeight="450"
    d:DesignWidth="800"
    Loaded="UserControl_Loaded"
    mc:Ignorable="d">
    <Grid>
        <Grid.RowDefinitions>
            <RowDefinition Height="auto" />
            <RowDefinition Height="*" />
            <RowDefinition Height="auto" />
        </Grid.RowDefinitions>
        <StackPanel
            HorizontalAlignment="Center"
            Orientation="Horizontal"
            Visibility="Collapsed">
            <!--  Filter Buttons  -->
            <ListBox
                HorizontalAlignment="Center"
                VerticalAlignment="Center"
                SelectionChanged="ListBox_SelectionChanged"
                Style="{StaticResource MaterialDesignFilterChipSecondaryListBox}">
                <ListBoxItem
                    x:Name="LevelFilter"
                    Content="Level"
                    Selected="DateFilter_Selected"
                    Unselected="DateFilter_Unselected" />
                <ListBoxItem
                    x:Name="PlaceFilter"
                    Content="Place"
                    Selected="Kills_Selected"
                    Unselected="Kills_Unselected" />
                <ListBoxItem
                    x:Name="PlatformFilter"
                    Content="Platform"
                    Selected="PlaylistFilter_Selected"
                    Unselected="PlaylistFilter_Unselected" />
                <ListBoxItem x:Name="KillsFilter" Content="Kills" />
                <ListBoxItem x:Name="TeamFilter" Content="Team" />
            </ListBox>
            <Button
                Margin="0"
                Click="Button_Click"
                Style="{StaticResource StarButtonStyle}">
                <materialDesign:PackIcon Kind="Gear" Style="{StaticResource IconStyle}" />
            </Button>
        </StackPanel>

        <!--  DataGrid for displaying data  -->
        <DataGrid
            x:Name="DataGridView"
            Grid.Row="1"
            AutoGenerateColumns="True"
            AutoGeneratingColumn="DataGridView_AutoGeneratingColumn"
            ColumnHeaderStyle="{StaticResource HeaderStyle}"
            MinRowHeight="80"
            RowBackground="{StaticResource MaterialDesignDarkSeparatorBackground}"
            RowStyle="{StaticResource MaterialDesignDataGridRow}"
            Sorting="DataGridView_Sorting"
            Style="{StaticResource DataGridStyle}">
            <DataGrid.Columns>
                <DataGridTemplateColumn Header="Skin">
                    <DataGridTemplateColumn.CellTemplate>
                        <DataTemplate>
                            <Image
                                Width="50"
                                Height="50"
                                Source="{Binding Skin, Mode=OneWay, IsAsync=True}" />
                        </DataTemplate>
                    </DataGridTemplateColumn.CellTemplate>
                </DataGridTemplateColumn>
            </DataGrid.Columns>

        </DataGrid>
        <!--  Pagination Controls  -->
        <StackPanel
            Grid.Row="2"
            Margin="10"
            HorizontalAlignment="Center"
            VerticalAlignment="Bottom"
            Orientation="Horizontal">
            <Button
                Click="FirstPage_Click"
                Content="First"
                Style="{StaticResource MaterialDesignFlatButton}" />
            <Button
                Click="PreviousPage_Click"
                Content="Previous"
                Style="{StaticResource MaterialDesignFlatButton}" />
            <TextBox
                x:Name="PageNumberTextBox"
                Width="50"
                Height="40"
                Foreground="{StaticResource foreground}"
                IsReadOnly="True"
                Style="{StaticResource MaterialDesignTextBox}"
                TextAlignment="Center" />
            <Button
                Click="NextPage_Click"
                Content="Next"
                Style="{StaticResource MaterialDesignFlatButton}" />
            <Button
                Click="LastPage_Click"
                Content="Last"
                Style="{StaticResource MaterialDesignFlatButton}" />
        </StackPanel>
    </Grid>
</UserControl>

================
File: AA_DistinctRosterFilterControl.xaml.cs
================
using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using System.Windows;
using System.Windows.Controls;
using System.Windows.Data;
using System.Windows.Documents;
using System.Windows.Input;
using System.Windows.Media;
using System.Windows.Media.Imaging;
using System.Windows.Navigation;
using MaterialDesignThemes.Wpf;
using SQLitePCL;
using System.IO;
using SQLiteViewer.Properties;
using System.ComponentModel;

namespace SQLiteViewer
{
    /// <summary>
    /// Interaction logic for AA_BetterReplaysUC.xaml
    /// </summary>
    public partial class AA_DistinctRosterFilterControl : UserControl
    {
        MainWindow mainWindow;
        public ObservableCollection<AA_DistinctRoster> FilteredData { get; set; }
        public ObservableCollection<AA_DistinctRoster> _pagedData { get; set; }
        private ObservableCollection<AA_DistinctRoster> OriginalData;
        private readonly DatabaseManager dbManager;

        private int _pageSize = 10;
        private int _currentPageIndex = 0;
        private int _totalPages;
        private string _orderBy = "";
        private bool _ascending = true;

        public AA_DistinctRosterFilterControl()
        {
            InitializeComponent();
            this.DataContext = this;

            // Initialize SQLitePCL.Batteries
            Batteries_V2.Init();
            string dbPath = Path.Combine(AppDomain.CurrentDomain.BaseDirectory, "Database.db");
            dbManager = new DatabaseManager(dbPath);

            // Initialize paged data collection
            OriginalData = new ObservableCollection<AA_DistinctRoster>();
            FilteredData = new ObservableCollection<AA_DistinctRoster>(OriginalData);
            _pagedData = new ObservableCollection<AA_DistinctRoster>();

            // Calculate total pages
            _totalPages = ((dbManager.GetRowCount("AA_DistinctRoster") + _pageSize - 1) / _pageSize);  // Rounded up division

            // Display the first page
            LoadPage(0);
        }

        // Method to load a specific page
        private void LoadPage(int pageIndex)
        {
            if (pageIndex < 0 || pageIndex >= _totalPages)
                return;

            _pagedData.Clear();
            (var pageData,var total_rows) = dbManager.FilterAndPaginateDistinctRoster(fileName: "", replayDate: null, displayName: null, minLvl: null, maxLvl: null, orderBy: _orderBy, ascending: _ascending, pageNumber: pageIndex, pageSize: _pageSize);
            _totalPages = ((total_rows + _pageSize - 1) / _pageSize);  // Rounded up division

            foreach (var item in pageData)
            {
                _pagedData.Add(item);
            }

            DataGridView.ItemsSource = _pagedData;
            _currentPageIndex = pageIndex;

            // Update the page number display
            PageNumberTextBox.Text = (_currentPageIndex + 1).ToString();
        }
        // Event handler for "First" button
        private void FirstPage_Click(object sender, RoutedEventArgs e)
        {
            LoadPage(0);
        }

        // Event handler for "Previous" button
        private void PreviousPage_Click(object sender, RoutedEventArgs e)
        {
            if (_currentPageIndex > 0)
            {
                LoadPage(_currentPageIndex - 1);
            }
        }

        // Event handler for "Next" button
        private void NextPage_Click(object sender, RoutedEventArgs e)
        {
            if (_currentPageIndex < _totalPages - 1)
            {
                LoadPage(_currentPageIndex + 1);
            }
        }

        // Event handler for "Last" button
        private void LastPage_Click(object sender, RoutedEventArgs e)
        {
            LoadPage(_totalPages - 1);
        }


        // Method to apply the filter and refresh the DataGrid
        private void ApplyFilters()
        {
            var filtered = OriginalData.AsEnumerable();

            //apply filters
            if (LevelFilter.IsSelected)
            {
                filtered = AA_DistinctRoster.FilterByLvlRange(filtered, Settings.Default.MinLvlTextBox, Settings.Default.MaxLvlTextBox);
            }
            if (PlatformFilter.IsSelected)
            {
                filtered = AA_DistinctRoster.FilterByPlatform(filtered, Settings.Default.PlatformComboBox);
            }
            if (PlaceFilter.IsSelected)
            {
                filtered = AA_DistinctRoster.FilterByPlaceRange(filtered, Settings.Default.MinPlaceTextBox, Settings.Default.MaxPlaceTextBox);
            }
            if (KillsFilter.IsSelected)
            {
                filtered = AA_DistinctRoster.FilterByKills(filtered, Settings.Default.MinKillsTextBox);
            }
            if (TeamFilter.IsSelected)
            {
                filtered = AA_DistinctRoster.FilterByTeam(filtered, Settings.Default.TeamTextBox);
            }

            FilteredData = new ObservableCollection<AA_DistinctRoster>(filtered);
            _totalPages = (FilteredData.Count + _pageSize - 1) / _pageSize;  // Rounded up division

            LoadPage(0);
        }

        private void ListBox_SelectionChanged(object sender, SelectionChangedEventArgs e)
        {
            try
            {
                //ApplyFilters();
            }
            catch (Exception ex)
            {

                throw;
            }
        }

        private void DateFilter_Selected(object sender, RoutedEventArgs e)
        {

        }

        private void DateFilter_Unselected(object sender, RoutedEventArgs e)
        {

        }

        private void Kills_Selected(object sender, RoutedEventArgs e)
        {

        }

        private void Kills_Unselected(object sender, RoutedEventArgs e)
        {

        }

        private void PlaylistFilter_Selected(object sender, RoutedEventArgs e)
        {

        }

        private void PlaylistFilter_Unselected(object sender, RoutedEventArgs e)
        {

        }

        private async void Button_Click(object sender, RoutedEventArgs e)
        {
         //   await mainWindow.FilterDialogHost.ShowDialog(new AA_DistinctRosterDialog());
        }

        private void UserControl_Loaded(object sender, RoutedEventArgs e)
        {
            mainWindow = (MainWindow)Application.Current.MainWindow;
        }

        private void DataGridView_AutoGeneratingColumn(object sender, DataGridAutoGeneratingColumnEventArgs e)
        {
            if (e.PropertyName == "Skin")
            {
                e.Cancel = true;
            }
        }

        private void DataGridView_Sorting(object sender, DataGridSortingEventArgs e)
        {
            e.Handled = true; // Cancel default sorting

            // Get the property name to sort by
            string sortBy = e.Column.SortMemberPath;

            // Check current sort direction
            ListSortDirection direction = e.Column.SortDirection ?? ListSortDirection.Ascending;
            _orderBy = sortBy;
            // Perform the custom sorting on the full data set
            if (direction == ListSortDirection.Ascending)
            {
                _ascending = true;
                e.Column.SortDirection = ListSortDirection.Descending;
            }
            else
            {
                _ascending = false;
                e.Column.SortDirection = ListSortDirection.Ascending;
            }

            // Load the current page after sorting
            LoadPage(0);
        }

        // Helper method to get the property value using reflection
        private object GetPropertyValue(object obj, string propertyName)
        {
            return obj.GetType().GetProperty(propertyName).GetValue(obj, null);
        }
    }
}

================
File: App.config
================
<?xml version="1.0" encoding="utf-8" ?>
<configuration>
    <configSections>
        <sectionGroup name="userSettings" type="System.Configuration.UserSettingsGroup, System, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" >
            <section name="SQLiteViewer.Properties.Settings" type="System.Configuration.ClientSettingsSection, System, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" allowExeDefinition="MachineToLocalUser" requirePermission="false" />
        </sectionGroup>
    </configSections>
    <userSettings>
        <SQLiteViewer.Properties.Settings>
            <setting name="BetterReplayDateFrom" serializeAs="String">
                <value />
            </setting>
            <setting name="BetterReplayKillsFrom" serializeAs="String">
                <value>0</value>
            </setting>
            <setting name="BetterReplayPlaylist" serializeAs="String">
                <value />
            </setting>
            <setting name="BetterReplayDateTo" serializeAs="String">
                <value />
            </setting>
            <setting name="BetterReplayKillsTo" serializeAs="String">
                <value>0</value>
            </setting>
            <setting name="BetterReplaySeason" serializeAs="String">
                <value>0</value>
            </setting>
            <setting name="BetterReplayPlacement" serializeAs="String">
                <value>0</value>
            </setting>
            <setting name="MinKillsTextBox" serializeAs="String">
                <value>0</value>
            </setting>
            <setting name="TeamTextBox" serializeAs="String">
                <value>0</value>
            </setting>
            <setting name="PlatformComboBox" serializeAs="String">
                <value />
            </setting>
            <setting name="MinPlaceTextBox" serializeAs="String">
                <value>0</value>
            </setting>
            <setting name="MaxPlaceTextBox" serializeAs="String">
                <value>0</value>
            </setting>
            <setting name="MinLvlTextBox" serializeAs="String">
                <value>0</value>
            </setting>
            <setting name="MaxLvlTextBox" serializeAs="String">
                <value>0</value>
            </setting>
            <setting name="MinActionNumberTextBox" serializeAs="String">
                <value>0</value>
            </setting>
            <setting name="MaxActionNumberTextBox" serializeAs="String">
                <value>0</value>
            </setting>
            <setting name="StatusComboBox" serializeAs="String">
                <value />
            </setting>
            <setting name="RarityComboBox" serializeAs="String">
                <value />
            </setting>
            <setting name="WeaponTextBox" serializeAs="String">
                <value />
            </setting>
            <setting name="POITextBox" serializeAs="String">
                <value />
            </setting>
            <setting name="IsBotFilter" serializeAs="String">
                <value>True</value>
            </setting>
            <setting name="IsTeamFilter" serializeAs="String">
                <value>True</value>
            </setting>
            <setting name="IsAnonFilter" serializeAs="String">
                <value>True</value>
            </setting>
            <setting name="FileNameFilter" serializeAs="String">
                <value />
            </setting>
            <setting name="ReplayDateFilter" serializeAs="String">
                <value />
            </setting>
            <setting name="DisplayNameFilter" serializeAs="String">
                <value />
            </setting>
            <setting name="ActionerFilter" serializeAs="String">
                <value />
            </setting>
            <setting name="ActioneeFilter" serializeAs="String">
                <value />
            </setting>
        </SQLiteViewer.Properties.Settings>
    </userSettings>
</configuration>

================
File: App.xaml
================
<Application
    x:Class="SQLiteViewer.App"
    xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
    xmlns:local="clr-namespace:SQLiteViewer"
    xmlns:materialDesign="http://materialdesigninxaml.net/winfx/xaml/themes"
    xmlns:resources="clr-namespace:SQLiteViewer.Resources"
    StartupUri="MainWindow.xaml">
    <Application.Resources>
        <ResourceDictionary>
            <ResourceDictionary.MergedDictionaries>
                <materialDesign:BundledTheme
                    BaseTheme="Dark"
                    PrimaryColor="Blue"
                    SecondaryColor="Lime" />
                <ResourceDictionary Source="pack://application:,,,/MaterialDesignThemes.Wpf;component/Themes/MaterialDesign3.Defaults.xaml" />
                <ResourceDictionary Source="Resources/Colors.xaml" />
                <ResourceDictionary Source="Resources/Styles.xaml" />
            </ResourceDictionary.MergedDictionaries>
            <!--  Converters  -->
            <resources:BooleanToPackIconKindConverter x:Key="BooleanToPackIconKindConverter" />
            <resources:ScoreToColorConverter x:Key="ScoreToColorConverter" />
            <resources:RectConverter x:Key="RectConverter" />


            <!--  Transitions  -->
            <Storyboard x:Key="SlideInFromRight">
                <DoubleAnimation
                    Storyboard.TargetProperty="(UIElement.RenderTransform).(TranslateTransform.X)"
                    From="1000"
                    To="0"
                    Duration="0:0:0" />
            </Storyboard>
            <Storyboard x:Key="SlideInFromLeft">
                <DoubleAnimation
                    Storyboard.TargetProperty="(UIElement.RenderTransform).(TranslateTransform.X)"
                    From="-100"
                    To="0"
                    Duration="0:0:0" />
            </Storyboard>
            <Storyboard x:Key="SlideInFromTop">
                <DoubleAnimation
                    Storyboard.TargetProperty="(UIElement.RenderTransform).(TranslateTransform.Y)"
                    From="-100"
                    To="0"
                    Duration="0:0:0" />
            </Storyboard>

        </ResourceDictionary>
    </Application.Resources>
</Application>

================
File: App.xaml.cs
================
using System.Configuration;
using System.Data;
using System.Windows;

namespace SQLiteViewer
{
    /// <summary>
    /// Interaction logic for App.xaml
    /// </summary>
    public partial class App : Application
    {
    }

}

================
File: AssemblyInfo.cs
================
using System.Windows;

[assembly: ThemeInfo(
    ResourceDictionaryLocation.None,            //where theme specific resource dictionaries are located
                                                //(used if a resource is not found in the page,
                                                // or application resource dictionaries)
    ResourceDictionaryLocation.SourceAssembly   //where the generic resource dictionary is located
                                                //(used if a resource is not found in the page,
                                                // app, or any theme specific resource dictionaries)
)]

================
File: A_RosterWithCount.cs
================
using System;
using System.Collections.ObjectModel;
using System.ComponentModel;
using System.Linq;
using System.Windows.Media.Imaging;

namespace SQLiteViewer
{
    public class A_RosterWithCount : INotifyPropertyChanged
{
    public int Num { get; set; }
    public DateTime Date { get; set; }
    public string Playlist { get; set; }
    public string PlayerId { get; set; }
    public string DisplayName { get; set; }
    public int Lvl { get; set; }
    public int Place { get; set; }
    public int Anon { get; set; }
    public string Platform { get; set; }
    public int Team { get; set; }
    public int Kills { get; set; }
    public int BotKills { get; set; }
    public int Crowns { get; set; }
    public string TeamMate { get; set; }
    public string Skin { get; set; }
    public int Count { get; set; }
    public string MetK { get; set; }
    public string MetD { get; set; }
    public string Season { get; set; }
    public string FileName { get; set; }
    public BitmapSource BitmapSource { get; set; }

        public event PropertyChangedEventHandler PropertyChanged;

    protected virtual void OnPropertyChanged(string propertyName)
    {
        PropertyChanged?.Invoke(this, new PropertyChangedEventArgs(propertyName));
    }

    public static IEnumerable<AA_DistinctRoster> FilterByLvlRange(IEnumerable<AA_DistinctRoster> data, int minLvl, int maxLvl)
    {
        return new ObservableCollection<AA_DistinctRoster>(data.Where(item => item.Lvl >= minLvl && item.Lvl <= maxLvl));
    }

    public static ObservableCollection<AA_DistinctRoster> FilterByPlaceRange(IEnumerable<AA_DistinctRoster> data, int minPlace, int maxPlace)
    {
        return new ObservableCollection<AA_DistinctRoster>(data.Where(item => item.Place >= minPlace && item.Place <= maxPlace));
    }

    public static ObservableCollection<AA_DistinctRoster> FilterByPlatform(IEnumerable<AA_DistinctRoster> data, string platform)
    {
        return new ObservableCollection<AA_DistinctRoster>(data.Where(item => item.Platform == platform));
    }

    public static ObservableCollection<AA_DistinctRoster> FilterByKills(IEnumerable<AA_DistinctRoster> data, int minKills)
    {
        return new ObservableCollection<AA_DistinctRoster>(data.Where(item => item.Kills.HasValue && item.Kills.Value >= minKills));
    }

    public static ObservableCollection<AA_DistinctRoster> FilterByTeam(IEnumerable<AA_DistinctRoster> data, int team)
    {
        return new ObservableCollection<AA_DistinctRoster>(data.Where(item => item.Team == team));
    }
}
}

================
File: A_RosterWithCountUC.xaml
================
<UserControl
    x:Class="SQLiteViewer.A_RosterWithCountUC"
    xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
    xmlns:d="http://schemas.microsoft.com/expression/blend/2008"
    xmlns:local="clr-namespace:SQLiteViewer"
    xmlns:materialDesign="http://materialdesigninxaml.net/winfx/xaml/themes"
    xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
    d:DesignHeight="450"
    d:DesignWidth="800"
    Loaded="UserControl_Loaded"
    mc:Ignorable="d">
    <Grid>
        <Grid.RowDefinitions>
            <RowDefinition Height="auto" />
            <RowDefinition Height="auto" />
            <RowDefinition Height="*" />
            <RowDefinition Height="auto" />
        </Grid.RowDefinitions>
        <TextBlock Style="{StaticResource H1Style}" Text="Roaster With Count" />
        <StackPanel
            Grid.Row="1"
            HorizontalAlignment="Center"
            Orientation="Horizontal">
            <!--  Filter Buttons  -->
            <ListBox
                HorizontalAlignment="Center"
                VerticalAlignment="Center"
                Style="{StaticResource MaterialDesignFilterChipSecondaryListBox}">
                <ListBoxItem
                    x:Name="LevelFilter"
                    Content="Level"
                    Visibility="Collapsed" />
                <ListBoxItem
                    x:Name="PlaceFilter"
                    Content="Place"
                    Visibility="Collapsed" />
                <ListBoxItem
                    x:Name="PlatformFilter"
                    Content="Platform"
                    Visibility="Collapsed" />
                <ListBoxItem
                    x:Name="IsBotFilter"
                    Content="Bots"
                    IsSelected="True"
                    Selected="IsBotFilter_Selected"
                    Unselected="IsBotFilter_Selected" />
                <ListBoxItem
                    x:Name="IsTeamFilter"
                    Content="Team"
                    IsSelected="True"
                    Selected="IsTeamFilter_Selected"
                    Unselected="IsTeamFilter_Selected" />
                <ListBoxItem
                    x:Name="IsAnonFilter"
                    Content="Anon"
                    IsSelected="True"
                    Selected="IsAnonFilter_Selected"
                    Unselected="IsAnonFilter_Selected" />
                <ListBoxItem
                    x:Name="FileNameFilter"
                    Content="FileName"
                    Unselected="FileNameFilter_Unselected"
                    Visibility="Collapsed" />
                <ListBoxItem
                    x:Name="ReplayDateFilter"
                    Content="Date"
                    Unselected="ReplayDateFilter_Unselected"
                    Visibility="Collapsed" />
                <ListBoxItem
                    x:Name="DisplayNameFilter"
                    Content="DisplayName"
                    Unselected="DisplayNameFilter_Unselected"
                    Visibility="Collapsed" />
            </ListBox>
            <Button
                Margin="0"
                Click="Button_Click"
                Style="{StaticResource StarButtonStyle}"
                Visibility="Collapsed">
                <materialDesign:PackIcon Kind="Gear" Style="{StaticResource IconStyle}" />
            </Button>
        </StackPanel>

        <!--  DataGrid for displaying data  -->
        <DataGrid
            x:Name="DataGridView"
            Grid.Row="2"
            AutoGenerateColumns="True"
            AutoGeneratingColumn="DataGridView_AutoGeneratingColumn"
            ColumnHeaderStyle="{StaticResource HeaderStyle}"
            MinRowHeight="80"
            RowBackground="{StaticResource MaterialDesignDarkSeparatorBackground}"
            RowStyle="{StaticResource MaterialDesignDataGridRow}"
            SelectedCellsChanged="DataGridView_SelectedCellsChanged"
            Sorting="DataGridView_Sorting"
            Style="{StaticResource DataGridStyle}">
            <DataGrid.Columns>
                <DataGridTemplateColumn Header="Skin">
                    <DataGridTemplateColumn.CellTemplate>
                        <DataTemplate>
                            <Image
                                Width="50"
                                Height="50"
                                Source="{Binding BitmapSource, Mode=OneWay, IsAsync=True}" />
                        </DataTemplate>
                    </DataGridTemplateColumn.CellTemplate>
                </DataGridTemplateColumn>
            </DataGrid.Columns>

        </DataGrid>
        <!--  Pagination Controls  -->
        <StackPanel
            Grid.Row="3"
            Margin="10"
            HorizontalAlignment="Center"
            VerticalAlignment="Bottom"
            Orientation="Horizontal">
            <Button
                Click="FirstPage_Click"
                Content="First"
                Style="{StaticResource MaterialDesignFlatButton}" />
            <Button
                Click="PreviousPage_Click"
                Content="Previous"
                Style="{StaticResource MaterialDesignFlatButton}" />
            <TextBox
                x:Name="PageNumberTextBox"
                Width="50"
                Height="40"
                Foreground="{StaticResource foreground}"
                IsReadOnly="True"
                Style="{StaticResource MaterialDesignTextBox}"
                TextAlignment="Center" />
            <Button
                Click="NextPage_Click"
                Content="Next"
                Style="{StaticResource MaterialDesignFlatButton}" />
            <Button
                Click="LastPage_Click"
                Content="Last"
                Style="{StaticResource MaterialDesignFlatButton}" />
        </StackPanel>
    </Grid>
</UserControl>

================
File: A_RosterWithCountUC.xaml.cs
================
using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using System.Windows;
using System.Windows.Controls;
using System.Windows.Data;
using System.Windows.Documents;
using System.Windows.Input;
using System.Windows.Media;
using System.Windows.Media.Imaging;
using System.Windows.Navigation;
using MaterialDesignThemes.Wpf;
using SQLitePCL;
using System.IO;
using SQLiteViewer.Properties;
using System.ComponentModel;
using System.Drawing;
using static System.Net.Mime.MediaTypeNames;


namespace SQLiteViewer
{
    /// <summary>
    /// Interaction logic for AA_BetterReplaysUC.xaml
    /// </summary>
    public partial class A_RosterWithCountUC : UserControl
    {
        MainWindow mainWindow;
        public ObservableCollection<A_RosterWithCount> FilteredData { get; set; }
        public ObservableCollection<A_RosterWithCount> _pagedData { get; set; }
        private ObservableCollection<A_RosterWithCount> OriginalData;
        private readonly DatabaseManager dbManager;

        private bool first = true;

        private int _pageSize = 10;
        private int _currentPageIndex = 0;
        private int _totalPages;
        private string _orderBy = "";
        private bool _ascending = true;
        private string _fileName = "";
        private DateTime? _replayDate = null;
        private string _displayName = "";
        private string _isBot = "1";
        private string _isTeam = "1";
        private string _isAnon = "1";

        public A_RosterWithCountUC(string fileName = "",DateTime? replayDate=null)
        {
            InitializeComponent();
            this.DataContext = this;

            
            
            // Initialize SQLitePCL.Batteries
            Batteries_V2.Init();
            string dbPath = Path.Combine(AppDomain.CurrentDomain.BaseDirectory, "Database.db");
            dbManager = new DatabaseManager(dbPath);

            // Initialize paged data collection
            OriginalData = new ObservableCollection<A_RosterWithCount>();
            FilteredData = new ObservableCollection<A_RosterWithCount>();
            _pagedData = new ObservableCollection<A_RosterWithCount>();

            // Calculate total pages
            _totalPages = ((dbManager.GetRowCount("A_RosterWithCount") + _pageSize - 1) / _pageSize);  // Rounded up division

            

            if (fileName != "")
            {
                ApplyFileNameFilter(fileName);
            }
            else
            {
                if (Settings.Default.FileNameFilter != "")
                {
                    ApplyFileNameFilter(Settings.Default.FileNameFilter);
                }
            }
            if (replayDate != null)
            {
                ApplyReplayDateFilter(replayDate.Value);
            }
            else
            {
                if (Settings.Default.ReplayDateFilter.Date.Year != 1)
                {
                    ApplyReplayDateFilter(Settings.Default.ReplayDateFilter);
                }
            }
            if (Settings.Default.DisplayNameFilter != "")
            {
                ApplyDisplayNameFilter(Settings.Default.DisplayNameFilter);
            }

            // Display the first page
          //  LoadPage(0);
        }

        // Method to load a specific page
        private class ImageOverlayProcessor
        {
            private readonly Dictionary<string, string> _overlayPaths;

            public ImageOverlayProcessor()
            {
                string overlayDirectory = Path.Combine(Environment.CurrentDirectory, "Overlays");
                _overlayPaths = new Dictionary<string, string>
            {
                { "redX", Path.Combine(overlayDirectory, "redX.png") },
                { "blueX", Path.Combine(overlayDirectory, "blueX.png") },
                { "redGlow", Path.Combine(overlayDirectory, "redglow.png") },
                { "blueGlow", Path.Combine(overlayDirectory, "blueglow.png") },
                { "ghost", Path.Combine(overlayDirectory, "ghost.png") }
            };
            }
        }

        private void LoadPage(int pageIndex)
        {
            if (pageIndex < 0 )
                return;

            _pagedData.Clear();
            (var pageData, var total_rows) = dbManager.FilterAndPaginateRosterWithCount(fileName: _fileName, replayDate: _replayDate, displayName: _displayName, isBot:_isBot, isTeam:_isTeam,isAnon:_isAnon, orderBy: _orderBy, ascending: _ascending, pageNumber: pageIndex , pageSize: _pageSize);

            // Calculate total pages
            _totalPages = ((total_rows + _pageSize - 1) / _pageSize);  // Rounded up division

            foreach (var item in pageData)
            {
                List<Bitmap> bitmaps = new List<Bitmap>();
                if (File.Exists(item.Skin))
                {
                    bitmaps.Add(new Bitmap(item.Skin));
                }
                if (item.MetD == "1")
                {
                    bitmaps.Add( new Bitmap(LoadBitmapFromByteArray(Properties.Resources.redglow)));
                }
                if (item.MetD == "2")
                {
                    bitmaps.Add(new Bitmap(LoadBitmapFromByteArray(Properties.Resources.glow)));
                }
                if (item.MetK == "1")
                {
                    bitmaps.Add(new Bitmap(LoadBitmapFromByteArray(Properties.Resources.redx)));
                }
                if (item.MetK == "2")
                {
                    bitmaps.Add(new Bitmap(LoadBitmapFromByteArray(Properties.Resources.bluex)));
                }
                if (item.Anon == 1)
                {
                    bitmaps.Add(new Bitmap(LoadBitmapFromByteArray(Properties.Resources.ghost)));
                }
                Bitmap result = Merge(bitmaps);
                item.BitmapSource = ConvertBitmapToBitmapSource(result);
                _pagedData.Add(item);
            }

            DataGridView.ItemsSource = _pagedData;
            _currentPageIndex = pageIndex;
            PageNumberTextBox.Text = (_currentPageIndex + 1).ToString();
        }

        // Helper method to apply specific overlays based on conditions
        private void ApplyOverlay(DrawingContext dc, string condition, string overlay1, string overlay2, BitmapImage baseImage)
        {
            if (condition == "1")
                DrawOverlay(dc, overlay1, baseImage);
            else if (condition == "2")
                DrawOverlay(dc, overlay2, baseImage);
        }

        // Draws the overlay image at the top-left corner
        private void DrawOverlay(DrawingContext dc, string overlayFileName, BitmapImage baseImage)
        {
            string overlayPath = Path.Combine(Environment.CurrentDirectory, "Overlays", overlayFileName);
            if (File.Exists(overlayPath))
            {
                BitmapImage overlayImage = new BitmapImage(new Uri(overlayPath));
                dc.DrawImage(overlayImage, new Rect(0, 0, baseImage.Width, baseImage.Height));  // Draw overlay
            }
        }

        // Method to save the final image to a file
        private void SaveBitmap(RenderTargetBitmap bitmap, string filePath)
        {
            // Use a memory stream to avoid file locking issues
            using (FileStream stream = new FileStream(filePath, FileMode.Create, FileAccess.Write, FileShare.None))
            {
                BitmapEncoder encoder = new PngBitmapEncoder(); // You can use any encoder (PNG, JPEG, etc.)
                encoder.Frames.Add(BitmapFrame.Create(bitmap));
                encoder.Save(stream);
            }
        }


        // Event handler for "First" button
        private void FirstPage_Click(object sender, RoutedEventArgs e)
        {
            LoadPage(0);
        }

        // Event handler for "Previous" button
        private void PreviousPage_Click(object sender, RoutedEventArgs e)
        {
            if (_currentPageIndex > 0)
            {
                LoadPage(_currentPageIndex - 1);
            }
        }

        // Event handler for "Next" button
        private void NextPage_Click(object sender, RoutedEventArgs e)
        {
            if (_currentPageIndex < _totalPages - 1)
            {
                LoadPage(_currentPageIndex + 1);
            }
        }

        // Event handler for "Last" button
        private void LastPage_Click(object sender, RoutedEventArgs e)
        {
            LoadPage(_totalPages - 1);
        }

        private void ListBox_SelectionChanged(object sender, SelectionChangedEventArgs e)
        {
            try
            {
                if (first)
                {
                    return;
                }
                _isBot = IsBotFilter != null && IsBotFilter.IsSelected ? "1" : "";
                _isTeam = IsTeamFilter != null && IsTeamFilter.IsSelected ? "1" : "";
                _isAnon = IsAnonFilter != null && IsAnonFilter.IsSelected ? "1" : "";

                if (IsBotFilter != null) Settings.Default.IsBotFilter = IsBotFilter.IsSelected;
                if (IsTeamFilter != null) Settings.Default.IsTeamFilter = IsTeamFilter.IsSelected;
                if (IsAnonFilter != null) Settings.Default.IsAnonFilter = IsAnonFilter.IsSelected;
                Settings.Default.Save();
                LoadPage(0);
            }
            catch (Exception ex)
            {

                throw;
            }
        }

        private async void Button_Click(object sender, RoutedEventArgs e)
        {
         //   await mainWindow.FilterDialogHost.ShowDialog(new AA_DistinctRosterDialog());
        }

        private void UserControl_Loaded(object sender, RoutedEventArgs e)
        {
            mainWindow = (MainWindow)System.Windows.Application.Current.MainWindow;
            
            IsBotFilter.IsSelected = Settings.Default.IsBotFilter;
            _isBot = IsBotFilter.IsSelected ? "1" : "";
            IsTeamFilter.IsSelected = Settings.Default.IsTeamFilter;
            _isTeam = IsTeamFilter.IsSelected ? "1" : "";
            IsAnonFilter.IsSelected = Settings.Default.IsAnonFilter;
            _isAnon = IsAnonFilter.IsSelected ? "1" : "";
            first = false;
            LoadPage(0);
        }

        private void DataGridView_AutoGeneratingColumn(object sender, DataGridAutoGeneratingColumnEventArgs e)
        {
            if (e.PropertyName == "Skin" || e.PropertyName == "PlayerId" || e.PropertyName == "FileName"
                || e.PropertyName == "MetK" || e.PropertyName == "MetD" || e.PropertyName == "Anon" || e.PropertyName == "BitmapSource")
            {
                e.Cancel = true;
            }
        }

        private void DataGridView_Sorting(object sender, DataGridSortingEventArgs e)
        {
            e.Handled = true; // Cancel default sorting

            // Get the property name to sort by
            string sortBy = e.Column.SortMemberPath;

            // Check current sort direction
            ListSortDirection direction = e.Column.SortDirection ?? ListSortDirection.Ascending;
            _orderBy = sortBy;
            // Perform the custom sorting on the full data set
            if (direction == ListSortDirection.Ascending)
            {
                _ascending = true;
                e.Column.SortDirection = ListSortDirection.Descending;
            }
            else
            {
                _ascending = false;
                e.Column.SortDirection = ListSortDirection.Ascending;
            }

            // Load the current page after sorting
            LoadPage(0);
        }

        // Helper method to get the property value using reflection
        private object GetPropertyValue(object obj, string propertyName)
        {
            return obj.GetType().GetProperty(propertyName).GetValue(obj, null);
        }

        private void DataGridView_SelectedCellsChanged(object sender, SelectedCellsChangedEventArgs e)
        {
            if (DataGridView.SelectedCells.Count > 0)
            {
                var selectedCellInfo = e.AddedCells[0];
                var columnHeader = selectedCellInfo.Column.Header.ToString();
                var selectedCell = DataGridView.SelectedCells[0];
                var cellInfo = selectedCell.Item as A_RosterWithCount;  // Replace with your data type

                if (cellInfo != null)
                {
                    // Check which column was selected and apply the respective filter
                    switch (selectedCell.Column.Header.ToString())
                    {
                        case "DisplayName":
                            ApplyDisplayNameFilter(cellInfo.PlayerId);  // Assuming Teammates is a string
                            LoadPage(0);
                            break;

                        case "FileName":
                            ApplyFileNameFilter(cellInfo.FileName);  // Assuming FileName is a string
                            LoadPage(0);
                            break;

                        case "Date":
                            ApplyReplayDateFilter(cellInfo.Date);  // Assuming ReplayDate is a DateTime
                            LoadPage(0);
                            break;

                        case "Kills":
                            mainWindow.UnSelectAll();
                            mainWindow.NavigateTo(new BetterKillfeedFilterControl(cellInfo.FileName,actioner: cellInfo.PlayerId));
                            break;

                        case "Place":
                            mainWindow.UnSelectAll();
                            mainWindow.NavigateTo(new BetterKillfeedFilterControl(cellInfo.FileName,actionee: cellInfo.PlayerId));
                            break;
                    }
                }
            }
        }
        // Filter by Playlist
        private void ApplyFileNameFilter(string fileNameValue)
        {
            _fileName = fileNameValue;
            FileNameFilter.Visibility = Visibility.Visible;
            FileNameFilter.Content = $"FileName: {fileNameValue}";
            FileNameFilter.IsSelected = true;
            Settings.Default.FileNameFilter = fileNameValue;
            Settings.Default.Save();
            
        }
        private void ApplyReplayDateFilter(DateTime replayDateValue)
        {
            _replayDate = replayDateValue;
            ReplayDateFilter.Visibility = Visibility.Visible;
            ReplayDateFilter.Content = $"Date: {replayDateValue}";
            ReplayDateFilter.IsSelected = true;
            Settings.Default.ReplayDateFilter = replayDateValue;
            Settings.Default.Save();
        }
        private void ApplyDisplayNameFilter(string displayNameValue)
        {
            _displayName = displayNameValue;
            DisplayNameFilter.Visibility = Visibility.Visible;
            DisplayNameFilter.Content = $"PlayerID: {displayNameValue}";
            DisplayNameFilter.IsSelected = true;
            Settings.Default.DisplayNameFilter = displayNameValue;
            Settings.Default.Save();
        }
        private void FileNameFilter_Unselected(object sender, RoutedEventArgs e)
        {
            FileNameFilter.Visibility = Visibility.Collapsed;
            _fileName = "";
            Settings.Default.FileNameFilter = "";
            Settings.Default.Save();
            LoadPage(0);
        }

        private void ReplayDateFilter_Unselected(object sender, RoutedEventArgs e)
        {
            ReplayDateFilter.Visibility = Visibility.Collapsed;
            _replayDate = null;
            Settings.Default.ReplayDateFilter = new DateTime();
            Settings.Default.Save();
            LoadPage(0);
        }

        private void DisplayNameFilter_Unselected(object sender, RoutedEventArgs e)
        {
            DisplayNameFilter.Visibility = Visibility.Collapsed;
            _displayName = "";
            Settings.Default.DisplayNameFilter = "";
            Settings.Default.Save();
            LoadPage(0);
        }
        private static Bitmap Merge(List<Bitmap> images)
        {
            try
            {
                var enumerable = images as List<Bitmap> ?? images.ToList();
                var sample = enumerable.First();
                var bitmap = new Bitmap(sample.Width, sample.Height);
                bitmap.SetResolution(sample.HorizontalResolution, sample.VerticalResolution);
                using (var g = Graphics.FromImage(bitmap))
                {
                    foreach (var image in enumerable)
                    {
                        g.DrawImage(image, 0, 0);
                    }
                }
                //foreach (var bmp in enumerable)
                //{
                //    bmp.Dispose();
                //}
                return bitmap;
            }
            catch (Exception)
            {
                return new Bitmap(120, 120);
            }
            

        }
        public BitmapSource ConvertBitmapToBitmapSource(Bitmap bitmap)
        {
            using (var memoryStream = new MemoryStream())
            {
                // Save the bitmap to the memory stream
                bitmap.Save(memoryStream, System.Drawing.Imaging.ImageFormat.Png);

                // Reset the stream position to the beginning
                memoryStream.Seek(0, SeekOrigin.Begin);

                // Create a BitmapImage from the stream
                var bitmapImage = new BitmapImage();
                bitmapImage.BeginInit();
                bitmapImage.CacheOption = BitmapCacheOption.OnLoad; // Ensure the stream can be closed after loading
                bitmapImage.StreamSource = memoryStream;
                bitmapImage.EndInit();
                bitmapImage.Freeze(); // Make it cross-thread accessible (optional)

                return bitmapImage;
            }
        }
        public Bitmap LoadBitmapFromByteArray(byte[] imageData)
        {
            using (var memoryStream = new MemoryStream(imageData))
            {
                // Create a Bitmap from the memory stream
                return new Bitmap(memoryStream);
            }
        }

        private void IsBotFilter_Selected(object sender, RoutedEventArgs e)
        {
            if (first) return;
            _isBot = IsBotFilter != null && IsBotFilter.IsSelected ? "1" : "";


            if (IsBotFilter != null) Settings.Default.IsBotFilter = IsBotFilter.IsSelected;

            Settings.Default.Save();
            LoadPage(0);
        }

        private void IsTeamFilter_Selected(object sender, RoutedEventArgs e)
        {
            if (first) return;
            _isTeam = IsTeamFilter != null && IsTeamFilter.IsSelected ? "1" : "";

            if (IsTeamFilter != null) Settings.Default.IsTeamFilter = IsTeamFilter.IsSelected;
            Settings.Default.Save();
            LoadPage(0);
        }

        private void IsAnonFilter_Selected(object sender, RoutedEventArgs e)
        {
            if (first) return;
            _isAnon = IsAnonFilter != null && IsAnonFilter.IsSelected ? "1" : "";
            if (IsAnonFilter != null) Settings.Default.IsAnonFilter = IsAnonFilter.IsSelected;
            Settings.Default.Save();
            LoadPage(0);
        }

    }
}

================
File: BetterKillfeed.cs
================
using System;
using System.Collections.ObjectModel;
using System.ComponentModel;
using System.Linq;

namespace SQLiteViewer
{
    public class BetterKillfeed : INotifyPropertyChanged
    {
        public string FileName { get; set; }
        public int ActionNumber { get; set; }
        public string Actioner { get; set; }
        public int Team1 { get; set; }
        public string Actionee { get; set; }
        public int Team2 { get; set; }
        public string Status { get; set; }
        public string Action { get; set; }
        public string Rarity { get; set; }
        public string Weapon { get; set; }
        public string POI { get; set; }
        public float ActionTime { get; set; }
        public DateTime ReplayDate { get; set; }
        public string ActionerId { get; set; }
        public string ActioneeId { get; set; }

        public event PropertyChangedEventHandler PropertyChanged;

        protected virtual void OnPropertyChanged(string propertyName)
        {
            PropertyChanged?.Invoke(this, new PropertyChangedEventArgs(propertyName));
        }

        public static ObservableCollection<BetterKillfeed> FilterByActionNumber(IEnumerable<BetterKillfeed> data, int minActionNumber, int maxActionNumber)
        {
            return new ObservableCollection<BetterKillfeed>(data.Where(item => item.ActionNumber >= minActionNumber && item.ActionNumber <= maxActionNumber));
        }

        public static ObservableCollection<BetterKillfeed> FilterByStatus(IEnumerable<BetterKillfeed> data, string status)
        {
            return new ObservableCollection<BetterKillfeed>(data.Where(item => item.Status == status));
        }

        public static ObservableCollection<BetterKillfeed> FilterByRarity(IEnumerable<BetterKillfeed> data, string rarity)
        {
            return new ObservableCollection<BetterKillfeed>(data.Where(item => item.Rarity == rarity));
        }

        public static ObservableCollection<BetterKillfeed> FilterByWeapon(IEnumerable<BetterKillfeed> data, string weapon)
        {
            return new ObservableCollection<BetterKillfeed>(data.Where(item => item.Weapon == weapon));
        }

        public static ObservableCollection<BetterKillfeed> FilterByPOI(IEnumerable<BetterKillfeed> data, string poi)
        {
            return new ObservableCollection<BetterKillfeed>(data.Where(item => item.POI == poi));
        }
    }
}

================
File: BetterKillfeedDialog.xaml
================
<UserControl
    x:Class="SQLiteViewer.BetterKillfeedDialog"
    xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
    xmlns:d="http://schemas.microsoft.com/expression/blend/2008"
    xmlns:local="clr-namespace:SQLiteViewer"
    xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
    d:DesignHeight="450"
    d:DesignWidth="800"
    mc:Ignorable="d">
    <Border
        Padding="0"
        Background="{StaticResource Background}"
        CornerRadius="20">
        <StackPanel>
            <StackPanel Margin="20" Orientation="Horizontal">
                <TextBlock Style="{StaticResource H3Style}" Text="Action Number Min:" />
                <TextBox
                    x:Name="MinActionNumberTextBox"
                    Width="100"
                    Margin="10" />
                <TextBlock Style="{StaticResource H3Style}" Text="Max:" />
                <TextBox
                    x:Name="MaxActionNumberTextBox"
                    Width="100"
                    Margin="10" />
            </StackPanel>
            <StackPanel Margin="20" Orientation="Horizontal">
                <TextBlock Style="{StaticResource H3Style}" Text="Weapon:" />
                <TextBox
                    x:Name="WeaponTextBox"
                    Width="100"
                    Margin="10" />
            </StackPanel>
            <StackPanel Margin="20" Orientation="Horizontal">
                <TextBlock Style="{StaticResource H3Style}" Text="POI:" />
                <TextBox
                    x:Name="POITextBox"
                    Width="100"
                    Margin="10" />

            </StackPanel>
            <StackPanel Margin="20" Orientation="Horizontal">
                <TextBlock Style="{StaticResource H3Style}" Text="Status:" />
                <ComboBox
                    x:Name="StatusComboBox"
                    Width="100"
                    Margin="10"
                    Style="{StaticResource MaterialDesignOutlinedComboBox}" />
            </StackPanel>
            <StackPanel Margin="20" Orientation="Horizontal">
                <TextBlock Style="{StaticResource H3Style}" Text="Rarity:" />
                <ComboBox
                    x:Name="RarityComboBox"
                    Width="100"
                    Margin="10"
                    Style="{StaticResource MaterialDesignOutlinedComboBox}" />
            </StackPanel>
            <Grid
                Margin="20"
                HorizontalAlignment="Center"
                VerticalAlignment="Bottom">
                <Button
                    x:Name="Savebtn"
                    Click="Savebtn_Click"
                    Content="Save"
                    IsDefault="True"
                    Style="{StaticResource MaterialDesignFlatButton}" />
            </Grid>
        </StackPanel>
    </Border>
</UserControl>

================
File: BetterKillfeedDialog.xaml.cs
================
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using System.Windows;
using System.Windows.Controls;
using System.Windows.Data;
using System.Windows.Documents;
using System.Windows.Input;
using System.Windows.Media;
using System.Windows.Media.Imaging;
using System.Windows.Navigation;
using System.Windows.Shapes;
using MaterialDesignThemes.Wpf;
using SQLiteViewer.Properties;

namespace SQLiteViewer
{
    /// <summary>
    /// Interaction logic for BetterReplaysDialog.xaml
    /// </summary>
    public partial class BetterKillfeedDialog : UserControl
    {
        public BetterKillfeedDialog()
        {
            InitializeComponent();
            var playlist1 = new List<string>(["Knocked", "Killed", "Revived"]);
            var playlist2 = new List<string>(["Common", "Uncommon", "Rare", "Epic", "Mythic", "Legendary"]);
            MinActionNumberTextBox.Text = Settings.Default.MinActionNumberTextBox.ToString();
            MaxActionNumberTextBox.Text = Settings.Default.MaxActionNumberTextBox.ToString();
            StatusComboBox.ItemsSource = playlist1;
            StatusComboBox.SelectedValue = Settings.Default.StatusComboBox;
            RarityComboBox.ItemsSource = playlist2;
            RarityComboBox.SelectedValue = Settings.Default.RarityComboBox;
            WeaponTextBox.Text = Settings.Default.WeaponTextBox.ToString();
            POITextBox.Text = Settings.Default.POITextBox.ToString();
        }

        private void Savebtn_Click(object sender, RoutedEventArgs e)
        {
            Settings.Default.MinActionNumberTextBox = Convert.ToInt32(MinActionNumberTextBox.Text);
            Settings.Default.MaxActionNumberTextBox = Convert.ToInt32(MaxActionNumberTextBox.Text);
            Settings.Default.StatusComboBox = (String)StatusComboBox.SelectedValue?? "Knocked";
            Settings.Default.RarityComboBox = (String)RarityComboBox.SelectedValue?? "Common";
            Settings.Default.WeaponTextBox = WeaponTextBox.Text;
            Settings.Default.POITextBox = POITextBox.Text;
            Settings.Default.Save();
            DialogHost.CloseDialogCommand.Execute(true, null);
        }
    }
}

================
File: BetterKillfeedFilterControl.xaml
================
<UserControl
    x:Class="SQLiteViewer.BetterKillfeedFilterControl"
    xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
    xmlns:d="http://schemas.microsoft.com/expression/blend/2008"
    xmlns:local="clr-namespace:SQLiteViewer"
    xmlns:materialDesign="http://materialdesigninxaml.net/winfx/xaml/themes"
    xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
    d:DesignHeight="450"
    d:DesignWidth="800"
    Loaded="UserControl_Loaded"
    mc:Ignorable="d">
    <Grid>
        <Grid.RowDefinitions>
            <RowDefinition Height="auto" />
            <RowDefinition Height="auto" />
            <RowDefinition Height="*" />
            <RowDefinition Height="auto" />
        </Grid.RowDefinitions>
        <TextBlock Style="{StaticResource H1Style}" Text="Better Kill Feed" />

        <StackPanel
            Grid.Row="1"
            HorizontalAlignment="Center"
            Orientation="Horizontal">
            <!--  Filter Buttons  -->
            <ListBox
                HorizontalAlignment="Center"
                VerticalAlignment="Center"
                SelectionChanged="ListBox_SelectionChanged"
                Style="{StaticResource MaterialDesignFilterChipSecondaryListBox}">
                <ListBoxItem
                    x:Name="ActionNumberFilter"
                    Content="Action Number"
                    Visibility="Collapsed" />
                <ListBoxItem
                    x:Name="StatusFilter"
                    Content="Status"
                    Visibility="Collapsed" />
                <ListBoxItem
                    x:Name="RarityFilter"
                    Content="Rarity"
                    Visibility="Collapsed" />
                <ListBoxItem
                    x:Name="WeaponFilter"
                    Content="Weapon"
                    Visibility="Collapsed" />
                <ListBoxItem
                    x:Name="POIFilter"
                    Content="POI"
                    Visibility="Collapsed" />
                <ListBoxItem
                    x:Name="fileNameFilter"
                    Content="FileName"
                    Unselected="fileNameFilter_Unselected"
                    Visibility="Collapsed" />
                <ListBoxItem
                    x:Name="ActionerFilter"
                    Content="Actioner"
                    Unselected="ActionerFilter_Unselected"
                    Visibility="Collapsed" />
                <ListBoxItem
                    x:Name="ActioneeFilter"
                    Content="Actionee"
                    Unselected="ActioneeFilter_Unselected"
                    Visibility="Collapsed" />
            </ListBox>
            <Button
                Margin="0"
                Click="Button_Click"
                Style="{StaticResource StarButtonStyle}"
                Visibility="Collapsed">
                <materialDesign:PackIcon Kind="Gear" Style="{StaticResource IconStyle}" />
            </Button>
        </StackPanel>

        <!--  DataGrid for displaying data  -->
        <DataGrid
            x:Name="DataGridView"
            Grid.Row="2"
            AutoGenerateColumns="True"
            AutoGeneratingColumn="DataGridView_AutoGeneratingColumn"
            ColumnHeaderStyle="{StaticResource HeaderStyle}"
            MinRowHeight="80"
            RowBackground="{StaticResource MaterialDesignDarkSeparatorBackground}"
            RowStyle="{StaticResource MaterialDesignDataGridRow}"
            SelectedCellsChanged="DataGridView_SelectedCellsChanged"
            Sorting="DataGridView_Sorting"
            Style="{StaticResource DataGridStyle}" />
        <!--  Pagination Controls  -->
        <StackPanel
            Grid.Row="3"
            Margin="10"
            HorizontalAlignment="Center"
            VerticalAlignment="Bottom"
            Orientation="Horizontal">
            <Button
                Click="FirstPage_Click"
                Content="First"
                Style="{StaticResource MaterialDesignFlatButton}" />
            <Button
                Click="PreviousPage_Click"
                Content="Previous"
                Style="{StaticResource MaterialDesignFlatButton}" />
            <TextBox
                x:Name="PageNumberTextBox"
                Width="50"
                Height="40"
                Foreground="{StaticResource foreground}"
                IsReadOnly="True"
                Style="{StaticResource MaterialDesignTextBox}"
                TextAlignment="Center" />
            <Button
                Click="NextPage_Click"
                Content="Next"
                Style="{StaticResource MaterialDesignFlatButton}" />
            <Button
                Click="LastPage_Click"
                Content="Last"
                Style="{StaticResource MaterialDesignFlatButton}" />
        </StackPanel>
    </Grid>
</UserControl>

================
File: BetterKillfeedFilterControl.xaml.cs
================
using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using System.Windows;
using System.Windows.Controls;
using System.Windows.Data;
using System.Windows.Documents;
using System.Windows.Input;
using System.Windows.Media;
using System.Windows.Media.Imaging;
using System.Windows.Navigation;
using MaterialDesignThemes.Wpf;
using SQLitePCL;
using System.IO;
using SQLiteViewer.Properties;
using System.Security.AccessControl;
using System.ComponentModel;

namespace SQLiteViewer
{
    /// <summary>
    /// Interaction logic for AA_BetterReplaysUC.xaml
    /// </summary>
    public partial class BetterKillfeedFilterControl : UserControl
    {
        MainWindow mainWindow;
        public ObservableCollection<BetterKillfeed> FilteredData { get; set; }
        public ObservableCollection<BetterKillfeed> _pagedData { get; set; }
        private ObservableCollection<BetterKillfeed> OriginalData;
        private readonly DatabaseManager dbManager;

        private int _pageSize = 10;
        private int _currentPageIndex = 0;
        private int _totalPages;
        private string _orderBy = "";
        private bool _ascending = true;
        private string _fileName = "";
        private string _actioner = "";
        private string _actionee = "";

        public BetterKillfeedFilterControl(string fileName="", string actioner="", string actionee ="")
        {
            InitializeComponent();
            this.DataContext = this;
            
            // Initialize SQLitePCL.Batteries
            Batteries_V2.Init();
            string dbPath = Path.Combine(AppDomain.CurrentDomain.BaseDirectory, "Database.db");
            dbManager = new DatabaseManager(dbPath);

            // Initialize paged data collection
            OriginalData = new ObservableCollection<BetterKillfeed>();
            FilteredData = new ObservableCollection<BetterKillfeed>(OriginalData);
            _pagedData = new ObservableCollection<BetterKillfeed>();

            // Calculate total pages
            _totalPages = (dbManager.GetRowCount("BetterKillfeed") + _pageSize - 1) / _pageSize;  // Rounded up division

           

            if (fileName != "")
            {
                ApplyFileNameFilter(fileName);
            }
            else
            {
                if (Settings.Default.FileNameFilter != "")
                {
                    ApplyFileNameFilter(Settings.Default.FileNameFilter);
                }
            }
            if (actioner != "")
            {
                ApplyActionerFilter(actioner);
            }
            else
            {
                if (Settings.Default.ActionerFilter != "" && actionee == "" && Settings.Default.FileNameFilter != "")
                {
                    ApplyActionerFilter(Settings.Default.ActionerFilter);
                }
            }
            if (actionee != "")
            {
                ApplyActioneeFilter(actionee);
            }
            else
            {
                if (Settings.Default.ActioneeFilter != "" && actioner == "" && Settings.Default.FileNameFilter != "")
                {
                    ApplyActioneeFilter(Settings.Default.ActioneeFilter);
                }
            }
            // Display the first page
            LoadPage(0);
        }

        // Method to load a specific page
        private void LoadPage(int pageIndex)
        {
            if (pageIndex < 0 )
                return;

            _pagedData.Clear();
            (var pageData,var total_rows) = dbManager.FilterAndPaginateBetterKillFeed(fileName: _fileName, actioner: _actioner, actionee: _actionee, orderBy: _orderBy, ascending: _ascending, pageNumber: pageIndex, pageSize: _pageSize);
            
            _totalPages = (total_rows + _pageSize - 1) / _pageSize;  // Rounded up division

            foreach (var item in pageData)
            {
                _pagedData.Add(item);
            }

            DataGridView.ItemsSource = _pagedData;
            _currentPageIndex = pageIndex;

            // Update the page number display
            PageNumberTextBox.Text = (_currentPageIndex + 1).ToString();
        }
        // Event handler for "First" button
        private void FirstPage_Click(object sender, RoutedEventArgs e)
        {
            LoadPage(0);
        }

        // Event handler for "Previous" button
        private void PreviousPage_Click(object sender, RoutedEventArgs e)
        {
            if (_currentPageIndex > 0)
            {
                LoadPage(_currentPageIndex - 1);
            }
        }

        // Event handler for "Next" button
        private void NextPage_Click(object sender, RoutedEventArgs e)
        {
            if (_currentPageIndex < _totalPages - 1)
            {
                LoadPage(_currentPageIndex + 1);
            }
        }

        // Event handler for "Last" button
        private void LastPage_Click(object sender, RoutedEventArgs e)
        {
            LoadPage(_totalPages - 1);
        }


        // Method to apply the filter and refresh the DataGrid
        private void ApplyFilters()
        {
            var filtered = OriginalData.AsEnumerable();

            //apply filters
            if (ActionNumberFilter.IsSelected)
            {
                filtered = BetterKillfeed.FilterByActionNumber(filtered, Settings.Default.MinActionNumberTextBox, Settings.Default.MaxActionNumberTextBox);
            }
            if (StatusFilter.IsSelected)
            {
                filtered = BetterKillfeed.FilterByStatus(filtered, Settings.Default.StatusComboBox);
            }
            if (RarityFilter.IsSelected)
            {
                filtered = BetterKillfeed.FilterByRarity(filtered, Settings.Default.RarityComboBox);
            }
            if (WeaponFilter.IsSelected)
            {
                filtered = BetterKillfeed.FilterByWeapon(filtered, Settings.Default.WeaponTextBox);
            }
            if (POIFilter.IsSelected)
            {
                filtered = BetterKillfeed.FilterByPOI(filtered, Settings.Default.POITextBox);
            }

            FilteredData = new ObservableCollection<BetterKillfeed>(filtered);
            _totalPages = (FilteredData.Count + _pageSize - 1) / _pageSize;  // Rounded up division

            LoadPage(0);
        }

        private void ListBox_SelectionChanged(object sender, SelectionChangedEventArgs e)
        {
            try
            {
                //ApplyFilters();
            }
            catch (Exception ex)
            {

                throw;
            }
        }

        private async void Button_Click(object sender, RoutedEventArgs e)
        {
            await mainWindow.FilterDialogHost.ShowDialog(new BetterKillfeedDialog());
        }

        private void UserControl_Loaded(object sender, RoutedEventArgs e)
        {
            mainWindow = (MainWindow)Application.Current.MainWindow;
        }

        private void DataGridView_AutoGeneratingColumn(object sender, DataGridAutoGeneratingColumnEventArgs e)
        {
            if (e.PropertyName == "FileName" || e.PropertyName == "ActionerId" || e.PropertyName == "ActioneeId")
            {
                e.Cancel = true;
            }
        }

        private void DataGridView_Sorting(object sender, DataGridSortingEventArgs e)
        {
            e.Handled = true; // Cancel default sorting

            // Get the property name to sort by
            string sortBy = e.Column.SortMemberPath;

            // Check current sort direction
            ListSortDirection direction = e.Column.SortDirection ?? ListSortDirection.Ascending;
            _orderBy = sortBy;
            // Perform the custom sorting on the full data set
            if (direction == ListSortDirection.Ascending)
            {
                _ascending = true;
                e.Column.SortDirection = ListSortDirection.Descending;
            }
            else
            {
                _ascending = false;
                e.Column.SortDirection = ListSortDirection.Ascending;
            }

            // Load the current page after sorting
            LoadPage(0);
        }

        // Helper method to get the property value using reflection
        private object GetPropertyValue(object obj, string propertyName)
        {
            return obj.GetType().GetProperty(propertyName).GetValue(obj, null);
        }

        private void DataGridView_SelectedCellsChanged(object sender, SelectedCellsChangedEventArgs e)
        {
            if (DataGridView.SelectedCells.Count > 0)
            {
                var selectedCellInfo = e.AddedCells[0];
                var columnHeader = selectedCellInfo.Column.Header.ToString();
                var selectedCell = DataGridView.SelectedCells[0];
                var cellInfo = selectedCell.Item as BetterKillfeed;  // Replace with your data type

                if (cellInfo != null)
                {
                    // Check which column was selected and apply the respective filter
                    switch (selectedCell.Column.Header.ToString())
                    {
                        case "FileName":
                            ApplyFileNameFilter(cellInfo.FileName);  // Assuming Playlist is a string
                            LoadPage(0);
                            break;

                        case "ActionerId":
                            ApplyActionerFilter(cellInfo.ActionerId);  // Assuming Teammates is a string
                            LoadPage(0);
                            break;

                        case "ActioneeId":
                            ApplyActioneeFilter(cellInfo.ActioneeId);  // Assuming FileName is a string
                            LoadPage(0);
                            break;

                        case "ReplayDate":
                            //ApplyReplayDateFilter(cellInfo.ReplayDate);  // Assuming ReplayDate is a DateTime
                            break;
                    }
                }
            }
        }
        // Filter by Playlist
        private void ApplyFileNameFilter(string fileNameValue)
        {
            _fileName = fileNameValue;
            fileNameFilter.Visibility = Visibility.Visible;
            fileNameFilter.Content = $"FileName: {fileNameValue}";
            fileNameFilter.IsSelected = true;
            Settings.Default.FileNameFilter = fileNameValue;
            Settings.Default.Save();
        }
        private void ApplyActionerFilter(string actionerValue)
        {
            _actioner = actionerValue;
            ActionerFilter.Visibility = Visibility.Visible;
            ActionerFilter.Content =  $"ActionerID: {actionerValue}";
            ActionerFilter.IsSelected = true;
            Settings.Default.ActionerFilter = actionerValue;
            Settings.Default.Save();
        }
        private void ApplyActioneeFilter(string actioneeValue)
        {
            _actionee = actioneeValue;
            ActioneeFilter.Visibility = Visibility.Visible;
            ActioneeFilter.Content = $"ActioneeID: {actioneeValue}";
            ActioneeFilter.IsSelected = true;
            Settings.Default.ActioneeFilter = actioneeValue;
            Settings.Default.Save();
        }

        private void fileNameFilter_Unselected(object sender, RoutedEventArgs e)
        {
            fileNameFilter.Visibility = Visibility.Collapsed;
            _fileName = "";
            Settings.Default.FileNameFilter = "";
            Settings.Default.Save();
            LoadPage(0);
        }

        private void ActionerFilter_Unselected(object sender, RoutedEventArgs e)
        {
            ActionerFilter.Visibility = Visibility.Collapsed;
            _actioner = "";
            Settings.Default.ActionerFilter = "";
            Settings.Default.Save();
            LoadPage(0);
        }

        private void ActioneeFilter_Unselected(object sender, RoutedEventArgs e)
        {
            ActioneeFilter.Visibility = Visibility.Collapsed;
            _actionee = "";
            Settings.Default.ActioneeFilter = "";
            Settings.Default.Save();
            LoadPage(0);
        }
    }
}

================
File: BetterReplaysDialog.xaml
================
<UserControl
    x:Class="SQLiteViewer.BetterReplaysDialog"
    xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
    xmlns:d="http://schemas.microsoft.com/expression/blend/2008"
    xmlns:local="clr-namespace:SQLiteViewer"
    xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
    d:DesignHeight="450"
    d:DesignWidth="800"
    mc:Ignorable="d">
    <Border
        Padding="0"
        Background="{StaticResource Background}"
        CornerRadius="20">
        <StackPanel>
            <StackPanel Margin="20" Orientation="Horizontal">
                <TextBlock Style="{StaticResource H3Style}" Text="Date From:" />
                <DatePicker
                    x:Name="datePickerFrom"
                    Width="200"
                    Margin="10"
                    Style="{StaticResource MaterialDesignFloatingHintDatePicker}" />
                <TextBlock Style="{StaticResource H3Style}" Text="To:" />
                <DatePicker
                    x:Name="datePickerTo"
                    Width="200"
                    Margin="10"
                    Style="{StaticResource MaterialDesignFloatingHintDatePicker}" />
            </StackPanel>
            <StackPanel Margin="20" Orientation="Horizontal">
                <TextBlock Style="{StaticResource H3Style}" Text="Kills From:" />
                <TextBox
                    x:Name="KillsFrom"
                    Width="100"
                    Margin="10" />
                <TextBlock Style="{StaticResource H3Style}" Text="To:" />
                <TextBox
                    x:Name="KillsTo"
                    Width="100"
                    Margin="10" />
            </StackPanel>
            <StackPanel Margin="20" Orientation="Horizontal">
                <TextBlock Style="{StaticResource H3Style}" Text="Season:" />
                <TextBox
                    x:Name="SeasonText"
                    Width="100"
                    Margin="10" />

            </StackPanel>
            <StackPanel Margin="20" Orientation="Horizontal">
                <TextBlock Style="{StaticResource H3Style}" Text="Placement:" />
                <TextBox
                    x:Name="PlacementText"
                    Width="100"
                    Margin="10" />

            </StackPanel>
            <StackPanel Margin="20" Orientation="Horizontal">
                <TextBlock Style="{StaticResource H3Style}" Text="Playlist" />
                <ComboBox
                    x:Name="comboBox"
                    Width="100"
                    Margin="10"
                    Style="{StaticResource MaterialDesignOutlinedComboBox}" />
            </StackPanel>
            <Grid
                Margin="20"
                HorizontalAlignment="Center"
                VerticalAlignment="Bottom">
                <Button
                    x:Name="Savebtn"
                    Click="Savebtn_Click"
                    Content="Save"
                    IsDefault="True"
                    Style="{StaticResource MaterialDesignFlatButton}" />
            </Grid>
        </StackPanel>
    </Border>
</UserControl>

================
File: BetterReplaysDialog.xaml.cs
================
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using System.Windows;
using System.Windows.Controls;
using System.Windows.Data;
using System.Windows.Documents;
using System.Windows.Input;
using System.Windows.Media;
using System.Windows.Media.Imaging;
using System.Windows.Navigation;
using System.Windows.Shapes;
using MaterialDesignThemes.Wpf;
using SQLiteViewer.Properties;

namespace SQLiteViewer
{
    /// <summary>
    /// Interaction logic for BetterReplaysDialog.xaml
    /// </summary>
    public partial class BetterReplaysDialog : UserControl
    {
        public BetterReplaysDialog()
        {
            InitializeComponent();
            var playlist = new List<string>(["Solo","Duo"]);
            datePickerFrom.SelectedDate = Settings.Default.BetterReplayDateFrom;
            datePickerTo.SelectedDate = Settings.Default.BetterReplayDateTo;
            KillsFrom.Text = Settings.Default.BetterReplayKillsFrom.ToString();
            KillsTo.Text = Settings.Default.BetterReplayKillsTo.ToString();
            SeasonText.Text = Settings.Default.BetterReplaySeason.ToString();
            PlacementText.Text = Settings.Default.BetterReplayPlacement.ToString();
            comboBox.ItemsSource = playlist;
            comboBox.SelectedValue = Settings.Default.BetterReplayPlaylist;
        }

        private void Savebtn_Click(object sender, RoutedEventArgs e)
        {
            Settings.Default.BetterReplayDateFrom = datePickerFrom.SelectedDate??DateTime.Today;
            Settings.Default.BetterReplayDateTo = datePickerTo.SelectedDate??DateTime.Today.AddDays(1);
            Settings.Default.BetterReplayKillsFrom =Convert.ToInt32(KillsFrom.Text);
            Settings.Default.BetterReplayKillsTo =Convert.ToInt32(KillsTo.Text);
            Settings.Default.BetterReplaySeason = double.Parse(SeasonText.Text);
            Settings.Default.BetterReplayPlacement = int.Parse(PlacementText.Text);
            Settings.Default.BetterReplayPlaylist = (String)comboBox.SelectedValue??"Solo";
            Settings.Default.Save();
            DialogHost.CloseDialogCommand.Execute(true, null);
        }
    }
}

================
File: DatabaseManager.cs
================
using Microsoft.Data.Sqlite;
using System;
using System.Collections.ObjectModel;
using System.Data.Common;
using System.IO;

namespace SQLiteViewer  // Replace with your actual project namespace if different
{
    public class DatabaseManager
    {
        private readonly string connectionString;

        public DatabaseManager(string dbPath)
        {
            connectionString = $"Data Source={dbPath}";
        }
        public int GetRowCount(string tableName)
        {
            int rowCount = 0;

            using (var connection = new SqliteConnection(connectionString))
            {
                connection.Open();

                string query = $"PRAGMA cache_size = -100000; PRAGMA synchronous = OFF; SELECT COUNT(*) FROM {tableName}";

                using (var command = new SqliteCommand(query, connection))
                {
                    rowCount = Convert.ToInt32(command.ExecuteScalar());
                }
            }
            return rowCount;
        }
        public (ObservableCollection<AA_BetterReplays>,int) FilterAndPaginateBetterReplays(
            string teammate, string playlist,
            string orderBy, bool ascending, int pageNumber, int pageSize)
        {
            var betterreplaycommand = "PRAGMA cache_size = -1000000; PRAGMA synchronous = OFF; SELECT \r\n    R.\"fileName\", \r\n    R.\"replayDate\", \r\n    R.\"playlist\",\r\n\trt.teammates,\r\n    R.\"gameTime\", \r\n    R.\"season\", \r\n    COUNT(CASE WHEN ro.\"isBot\" > 0 THEN 1 END) AS \"botCount\",\r\n    SUM(CASE WHEN ro.\"replayPlayer\" > 0 THEN ro.\"kills\" ELSE 0 END) AS \"Kills\",\r\n    BK.bot_kills AS BotKills, -- Joining the bot_kills column from BotKills view\r\n    MAX(CASE WHEN ro.\"replayPlayer\" > 0 THEN ro.\"placement\" END) AS \"Placement\",\r\n    (SELECT POI\r\n     FROM BetterKillfeed\r\n     WHERE BetterKillfeed.fileName = R.fileName\r\n       AND POI IS NOT NULL\r\n     ORDER BY '#' DESC\r\n     LIMIT 1) AS \"Ended\" \r\nFROM \r\n    \"Replays\" R\r\nLEFT JOIN \r\n    \"Roster\" ro ON R.\"fileName\" = ro.\"fileName\"\r\nLEFT JOIN \r\n    BotKills BK ON R.\"fileName\" = BK.\"fileName\" AND BK.replayPlayer > 0\r\nLEFT JOIN\r\n    rTeammates rt ON R.\"fileName\" = rt.\"fileName\"\r\nWHERECommandC# \r\nGROUP BY \r\n    R.\"fileName\", R.\"replayDate\", R.\"playlist\", R.\"gameTime\", R.\"season\", rt.teammates";
            var total_rows = 0;
            var replays = new ObservableCollection<AA_BetterReplays>();
            using (var connection = new SqliteConnection(connectionString))
            {
                connection.Open();
                var command = connection.CreateCommand();

                // Base query
                command.CommandText = "WHERE 1 = 1";
                // Add filters dynamically
                if (!string.IsNullOrEmpty(teammate))
                {
                    command.CommandText += " AND teammates LIKE @teammate";
                    command.Parameters.AddWithValue("@teammate", $"%{teammate}%");
                }
                if (!string.IsNullOrEmpty(playlist))
                {
                    command.CommandText += " AND playlist LIKE @playlist";
                    command.Parameters.AddWithValue("@playlist", $"%{playlist}%");
                }


                
                var command2 = connection.CreateCommand();
                command2.CommandText = betterreplaycommand.Replace("WHERECommandC#", command.CommandText);
                command2.CommandText = command2.CommandText.Replace("    R.\"fileName\", \r\n    R.\"replayDate\", \r\n    R.\"playlist\",\r\n\trt.teammates,\r\n    R.\"gameTime\", \r\n    R.\"season\", \r\n    COUNT(CASE WHEN ro.\"isBot\" > 0 THEN 1 END) AS \"botCount\",\r\n    SUM(CASE WHEN ro.\"replayPlayer\" > 0 THEN ro.\"kills\" ELSE 0 END) AS \"Kills\",\r\n    BK.bot_kills AS BotKills, -- Joining the bot_kills column from BotKills view\r\n    MAX(CASE WHEN ro.\"replayPlayer\" > 0 THEN ro.\"placement\" END) AS \"Placement\",\r\n    (SELECT POI\r\n     FROM BetterKillfeed\r\n     WHERE BetterKillfeed.fileName = R.fileName\r\n       AND POI IS NOT NULL\r\n     ORDER BY '#' DESC\r\n     LIMIT 1) AS \"Ended\" ", "COUNT(*)");
                command2.CommandType = command.CommandType;
                command2.Transaction = command.Transaction;
                foreach (SqliteParameter parameter in command.Parameters)
                {
                    var newParameter = new SqliteParameter
                    {
                        ParameterName = parameter.ParameterName,
                        Value = parameter.Value,
                        DbType = parameter.DbType,
                        Direction = parameter.Direction,
                        Size = parameter.Size,
                        IsNullable = parameter.IsNullable
                    };

                    command2.Parameters.Add(newParameter);
                }
                var resutl = command2.ExecuteScalar();
                if (resutl != null)
                {
                    total_rows = int.Parse(resutl.ToString());
                }

                // Sorting
                if (!string.IsNullOrEmpty(orderBy))
                {

                    //command.CommandText += $" ORDER BY {orderBy} {(ascending ? "ASC" : "DESC")}";
                    if (orderBy== "FileName")
                    {
                        orderBy = "R.FileName";
                    }
                    betterreplaycommand += $"\r\nORDER BY {orderBy} {(ascending ? "ASC" : "DESC")}";

                }

                // Pagination
                //command.CommandText += " LIMIT @pageSize OFFSET @offset";
                betterreplaycommand += "\r\nLIMIT @pageSize OFFSET @offset";
                command.Parameters.AddWithValue("@pageSize", pageSize);
                command.Parameters.AddWithValue("@offset", (pageNumber) * pageSize);
                command.CommandText = betterreplaycommand.Replace("WHERECommandC#", command.CommandText);

                using (var reader = command.ExecuteReader())
                {
                    while (reader.Read())
                    {
                        replays.Add(new AA_BetterReplays
                        {
                            FileName = reader["FileName"].ToString(),
                            ReplayDate = DateTime.Parse(reader["ReplayDate"].ToString()),
                            Playlist = reader["Playlist"].ToString(),
                            Teammates = reader["Teammates"].ToString(),
                            GameTime = Convert.ToDouble(reader["GameTime"]),
                            Season = Convert.ToDouble(reader["Season"]),
                            BotCount = Convert.ToInt32(reader["BotCount"]),
                            Kills = Convert.ToInt32(reader["Kills"]),
                            BotKills = reader["BotKills"] != DBNull.Value ? Convert.ToInt32(reader["BotKills"]) : (int?)null,
                            Placement = Convert.ToInt32(reader["Placement"]),
                            Ended = reader["Ended"].ToString()
                        });
                    }
                }
            }

            return (replays,total_rows);
        }
        public (ObservableCollection<AA_DistinctRoster>, int) FilterAndPaginateDistinctRoster(
            string fileName, DateTime? replayDate, string displayName, int? minLvl, int? maxLvl,
            string orderBy, bool ascending, int pageNumber, int pageSize)
        {
            var total_rows = 0;
            var replays = new ObservableCollection<AA_DistinctRoster>();
            using (var connection = new SqliteConnection(connectionString))
            {
                connection.Open();
                var command = connection.CreateCommand();

                // Base query
                command.CommandText = "PRAGMA cache_size = -1000000; PRAGMA synchronous = OFF; SELECT * FROM AA_DistinctRoster WHERE 1 = 1";

                // Add filters dynamically
                if (!string.IsNullOrEmpty(fileName))
                {
                    command.CommandText += " AND Playlist LIKE @fileName";
                    command.Parameters.AddWithValue("@fileName", $"%{fileName}%");
                }

                if (replayDate.HasValue)
                {
                    command.CommandText += " AND Date = @replayDate";
                    command.Parameters.AddWithValue("@replayDate", replayDate.Value.ToString("yyyy-MM-dd"));
                }

                if (!string.IsNullOrEmpty(displayName))
                {
                    command.CommandText += " AND DisplayName LIKE @displayName";
                    command.Parameters.AddWithValue("@displayName", $"%{displayName}%");
                }

                if (minLvl.HasValue)
                {
                    command.CommandText += " AND Lvl >= @minLvl";
                    command.Parameters.AddWithValue("@minLvl", minLvl.Value);
                }

                if (maxLvl.HasValue)
                {
                    command.CommandText += " AND Lvl <= @maxLvl";
                    command.Parameters.AddWithValue("@maxLvl", maxLvl.Value);
                }

                // Sorting
                if (!string.IsNullOrEmpty(orderBy))
                {
                    command.CommandText += $" ORDER BY {orderBy} {(ascending ? "ASC" : "DESC")}";
                }
                var command2 = connection.CreateCommand();
                command2.CommandText = command.CommandText.Replace("*", "COUNT(*)");
                command2.CommandType = command.CommandType;
                command2.Transaction = command.Transaction;
                foreach (SqliteParameter parameter in command.Parameters)
                {
                    var newParameter = new SqliteParameter
                    {
                        ParameterName = parameter.ParameterName,
                        Value = parameter.Value,
                        DbType = parameter.DbType,
                        Direction = parameter.Direction,
                        Size = parameter.Size,
                        IsNullable = parameter.IsNullable
                    };

                    command2.Parameters.Add(newParameter);
                }
                var resutl = command2.ExecuteScalar();
                if (resutl != null)
                {
                    total_rows = int.Parse(resutl.ToString());
                }
                // Pagination
                command.CommandText += " LIMIT @pageSize OFFSET @offset";
                command.Parameters.AddWithValue("@pageSize", pageSize);
                command.Parameters.AddWithValue("@offset", (pageNumber) * pageSize);

                using (var reader = command.ExecuteReader())
                {
                    while (reader.Read())
                    {
                        replays.Add(new AA_DistinctRoster
                        {
                            Num = reader.GetInt32(reader.GetOrdinal("Num")),
                            Date = reader.GetDateTime(reader.GetOrdinal("Date")),
                            Playlist = reader.GetString(reader.GetOrdinal("Playlist")),
                            PlayerId = reader.GetString(reader.GetOrdinal("PlayerId")),
                            DisplayName = reader.GetString(reader.GetOrdinal("DisplayName")),
                            Lvl = reader.GetInt32(reader.GetOrdinal("Lvl")),
                            Place = reader.GetInt32(reader.GetOrdinal("Place")),
                            Anon = reader.GetInt32(reader.GetOrdinal("Anon")),
                            Platform = reader.GetString(reader.GetOrdinal("Platform")),
                            Team = reader.GetInt32(reader.GetOrdinal("Team")),
                            Kills = reader.IsDBNull(reader.GetOrdinal("Kills")) ? (int?)null : reader.GetInt32(reader.GetOrdinal("Kills")),
                            BotKills = reader.IsDBNull(reader.GetOrdinal("BotKills")) ? (int?)null : reader.GetInt32(reader.GetOrdinal("BotKills")),
                            Crowns = reader.GetInt32(reader.GetOrdinal("Crowns")),
                            TeamMate = reader.GetString(reader.GetOrdinal("TeamMate")),
                            Skin = Path.Combine(Environment.CurrentDirectory, "Outfits", reader.GetString(reader.GetOrdinal("Skin")) + ".png"),
                            Count = reader.GetInt32(reader.GetOrdinal("Count")),
                            MetK = reader.GetString(reader.GetOrdinal("MetK")),
                            MetD = reader.GetString(reader.GetOrdinal("MetD")),
                            Season = reader.GetString(reader.GetOrdinal("Season"))
                        });
                    }
                }
            }

            return (replays,total_rows);
        }
        public (ObservableCollection<A_RosterWithCount>,int) FilterAndPaginateRosterWithCount(
            string fileName, DateTime? replayDate, string displayName, string isBot, string isTeam, string isAnon,
            string orderBy, bool ascending, int pageNumber, int pageSize)
        {
            string roastercommand = "PRAGMA cache_size = -1000000; PRAGMA synchronous = OFF; SELECT \r\n    RV.item_number AS Num,  -- Adding the item_number column from the zReplayView\r\n    A.replayDate AS Date, \r\n    A.playlist,\r\n    LR.playerId,\r\n    LR.displayName,\r\n    LR.level AS Lvl,\r\n    LR.placement AS Place, \r\n    LR.anonymous AS Anon,\r\n    LR.platform,\r\n    LR.teamIndex AS Team,\r\n    LR.kills AS Kills,\r\n    BK.bot_kills AS BotKills,\r\n    LR.crowns,\r\n    COALESCE(\r\n        (\r\n            SELECT displayName\r\n            FROM (\r\n                SELECT \r\n                    displayName,\r\n                    ROW_NUMBER() OVER (PARTITION BY LR.fileName, LR.teamIndex ORDER BY placement DESC) AS rn\r\n                FROM Roster\r\n                WHERE LR.fileName = fileName\r\n                  AND LR.teamIndex = teamIndex\r\n                  AND displayName <> LR.displayName\r\n            ) AS Subquery\r\n            WHERE rn = 1\r\n        ), 'No Teammate'\r\n    ) AS TeamMate,\r\n\tLR.isBot,\r\n    LR.skin, \r\n    (\r\n        SELECT COUNT(*)\r\n        FROM Roster\r\n        WHERE \r\n            playerId = LR.playerId \r\n            AND isBot < 1\r\n    ) AS Count,\r\n    \r\n    SUM(\r\n        CASE \r\n            WHEN EXISTS (\r\n                SELECT 1\r\n                FROM Killfeed kf\r\n                JOIN Teammates tm ON tm.playerId = kf.actionerId AND tm.fileName = kf.fileName\r\n                WHERE kf.actioneeId = LR.playerId\r\n                  AND kf.fileName = LR.fileName\r\n                  AND tm.replayPlayer = 1\r\n            ) THEN 1\r\n            WHEN EXISTS (\r\n                SELECT 1\r\n                FROM Killfeed kf\r\n                JOIN Teammates tm ON tm.playerId = kf.actionerId AND tm.fileName = kf.fileName\r\n                WHERE kf.actioneeId = LR.playerId\r\n                  AND kf.fileName = LR.fileName\r\n                  AND tm.replayPlayer != 1\r\n            ) THEN 2\r\n            ELSE 0\r\n        END\r\n    ) AS MetK,\r\n    \r\n    SUM(\r\n        CASE \r\n            WHEN EXISTS (\r\n                SELECT 1\r\n                FROM Killfeed kf\r\n                JOIN Teammates tm ON tm.playerId = kf.actioneeId AND tm.fileName = kf.fileName\r\n                WHERE kf.actionerId = LR.playerId\r\n                  AND kf.fileName = LR.fileName\r\n                  AND tm.replayPlayer = 1\r\n            ) THEN 1\r\n            WHEN EXISTS (\r\n                SELECT 1\r\n                FROM Killfeed kf\r\n                JOIN Teammates tm ON tm.playerId = kf.actioneeId AND tm.fileName = kf.fileName\r\n                WHERE kf.actionerId = LR.playerId\r\n                  AND kf.fileName = LR.fileName\r\n                  AND tm.replayPlayer != 1\r\n            ) THEN 2\r\n            ELSE 0\r\n        END\r\n    ) AS MetD,\r\n    \r\n    -- Adding the new is_team column\r\n    CASE\r\n        WHEN EXISTS (\r\n            SELECT 1\r\n            FROM Teammates tm\r\n            WHERE tm.playerId = LR.playerId\r\n              AND tm.fileName = LR.fileName\r\n        ) THEN 1\r\n        ELSE 0\r\n    END AS isTeam,\r\n    \r\n    A.season,\r\n    LR.fileName AS fileName\r\nFROM \r\n    Roster LR\r\nJOIN \r\n    Replays A ON LR.fileName = A.fileName\r\nLEFT JOIN \r\n    BotKills BK ON LR.fileName = BK.fileName AND LR.playerId = BK.actionerId\r\nJOIN \r\n    zReplayView RV ON LR.fileName = RV.fileName\r\n WHERECommandC# \r\nGROUP BY \r\n    A.replayDate, A.playlist, LR.displayName, LR.kills, LR.level, LR.placement, LR.anonymous, LR.teamIndex, LR.isBot, LR.crowns, LR.skin, RV.item_number";
            var total_rows = 0;
            var replays = new ObservableCollection<A_RosterWithCount>();
            using (var connection = new SqliteConnection(connectionString))
            {
                connection.Open();
                var command = connection.CreateCommand();

                // Base query
                command.CommandText = "WHERE 1 = 1";

                // Add filters dynamically
                if (!string.IsNullOrEmpty(fileName))
                {
                    command.CommandText += " AND LR.fileName LIKE @fileName";
                    command.Parameters.AddWithValue("@fileName", $"%{fileName}%");
                }

                if (replayDate.HasValue)
                {
                    var temp = replayDate.Value.ToString("MM/dd/yyyy h:mm:ss tt");
                    command.CommandText += $" AND Date LIKE \'{temp}\'";
                    //command.Parameters.AddWithValue("@replayDate",temp);
                }

                if (!string.IsNullOrEmpty(displayName))
                {
                    command.CommandText += " AND playerId LIKE @displayName";
                    command.Parameters.AddWithValue("@displayName", $"%{displayName}%");
                }
                if (!string.IsNullOrEmpty(isBot))
                {
                    command.CommandText += $" AND isBot = {isBot}";
                }
                if (!string.IsNullOrEmpty(isTeam))
                {
                    command.CommandText += $" AND isTeam = {isTeam}";
                }
                if (!string.IsNullOrEmpty(isAnon))
                {
                    command.CommandText += $" AND Anon = {isAnon}";
                }

                var command2 = connection.CreateCommand();
                command2.CommandText = roastercommand.Replace("WHERECommandC#", command.CommandText);
                command2.CommandText = command2.CommandText.Replace("    RV.item_number AS Num,  -- Adding the item_number column from the zReplayView\r\n    A.replayDate AS Date, \r\n    A.playlist,\r\n    LR.playerId,\r\n    LR.displayName,\r\n    LR.level AS Lvl,\r\n    LR.placement AS Place, \r\n    LR.anonymous AS Anon,\r\n    LR.platform,\r\n    LR.teamIndex AS Team,\r\n    LR.kills AS Kills,\r\n    BK.bot_kills AS BotKills,\r\n    LR.crowns,\r\n    COALESCE(\r\n        (\r\n            SELECT displayName\r\n            FROM (\r\n                SELECT \r\n                    displayName,\r\n                    ROW_NUMBER() OVER (PARTITION BY LR.fileName, LR.teamIndex ORDER BY placement DESC) AS rn\r\n                FROM Roster\r\n                WHERE LR.fileName = fileName\r\n                  AND LR.teamIndex = teamIndex\r\n                  AND displayName <> LR.displayName\r\n            ) AS Subquery\r\n            WHERE rn = 1\r\n        ), 'No Teammate'\r\n    ) AS TeamMate,\r\n\tLR.isBot,\r\n    LR.skin, \r\n    (\r\n        SELECT COUNT(*)\r\n        FROM Roster\r\n        WHERE \r\n            playerId = LR.playerId \r\n            AND isBot < 1\r\n    ) AS Count,\r\n    \r\n    SUM(\r\n        CASE \r\n            WHEN EXISTS (\r\n                SELECT 1\r\n                FROM Killfeed kf\r\n                JOIN Teammates tm ON tm.playerId = kf.actionerId AND tm.fileName = kf.fileName\r\n                WHERE kf.actioneeId = LR.playerId\r\n                  AND kf.fileName = LR.fileName\r\n                  AND tm.replayPlayer = 1\r\n            ) THEN 1\r\n            WHEN EXISTS (\r\n                SELECT 1\r\n                FROM Killfeed kf\r\n                JOIN Teammates tm ON tm.playerId = kf.actionerId AND tm.fileName = kf.fileName\r\n                WHERE kf.actioneeId = LR.playerId\r\n                  AND kf.fileName = LR.fileName\r\n                  AND tm.replayPlayer != 1\r\n            ) THEN 2\r\n            ELSE 0\r\n        END\r\n    ) AS MetK,\r\n    \r\n    SUM(\r\n        CASE \r\n            WHEN EXISTS (\r\n                SELECT 1\r\n                FROM Killfeed kf\r\n                JOIN Teammates tm ON tm.playerId = kf.actioneeId AND tm.fileName = kf.fileName\r\n                WHERE kf.actionerId = LR.playerId\r\n                  AND kf.fileName = LR.fileName\r\n                  AND tm.replayPlayer = 1\r\n            ) THEN 1\r\n            WHEN EXISTS (\r\n                SELECT 1\r\n                FROM Killfeed kf\r\n                JOIN Teammates tm ON tm.playerId = kf.actioneeId AND tm.fileName = kf.fileName\r\n                WHERE kf.actionerId = LR.playerId\r\n                  AND kf.fileName = LR.fileName\r\n                  AND tm.replayPlayer != 1\r\n            ) THEN 2\r\n            ELSE 0\r\n        END\r\n    ) AS MetD,\r\n    \r\n    -- Adding the new is_team column\r\n    CASE\r\n        WHEN EXISTS (\r\n            SELECT 1\r\n            FROM Teammates tm\r\n            WHERE tm.playerId = LR.playerId\r\n              AND tm.fileName = LR.fileName\r\n        ) THEN 1\r\n        ELSE 0\r\n    END AS isTeam,\r\n    \r\n    A.season,\r\n    LR.fileName AS fileName", "    RV.item_number AS Num,  -- Adding the item_number column from the zReplayView\r\n    A.replayDate AS Date, \r\n    LR.level AS Lvl,\r\n    LR.placement AS Place, \r\n    LR.anonymous AS Anon,\r\n    LR.teamIndex AS Team,\r\n    LR.kills AS Kills,\r\n    BK.bot_kills AS BotKills,\r\n\tLR.isBot,\r\n    LR.skin, \r\n    CASE\r\n        WHEN EXISTS (\r\n            SELECT 1\r\n            FROM Teammates tm\r\n            WHERE tm.playerId = LR.playerId\r\n              AND tm.fileName = LR.fileName\r\n        ) THEN 1\r\n        ELSE 0\r\n    END AS isTeam,\r\n    A.season,\r\n    LR.fileName AS fileName");
                command2.CommandType = command.CommandType;
                command2.Transaction = command.Transaction;
                foreach (SqliteParameter parameter in command.Parameters)
                {
                    var newParameter = new SqliteParameter
                    {
                        ParameterName = parameter.ParameterName,
                        Value = parameter.Value,
                        DbType = parameter.DbType,
                        Direction = parameter.Direction,
                        Size = parameter.Size,
                        IsNullable = parameter.IsNullable
                    };

                    command2.Parameters.Add(newParameter);
                }
                var result = command2.ExecuteReader();
                while (result.Read())
                {
                    total_rows++;
                }

                result.Close();

                // Sorting
                if (!string.IsNullOrEmpty(orderBy))
                {
                    //command.CommandText += $" ORDER BY {orderBy} {(ascending ? "ASC" : "DESC")}";
                    if (orderBy == "FileName")
                    {
                        orderBy = "LR.FileName";
                    }
                    roastercommand += $"\r\nORDER BY {orderBy} {(ascending ? "ASC" : "DESC")}";
                }
                // Pagination
                //command.CommandText += " LIMIT @pageSize OFFSET @offset";
                roastercommand += "\r\nLIMIT @pageSize OFFSET @offset";
                command.Parameters.AddWithValue("@pageSize", pageSize);
                command.Parameters.AddWithValue("@offset", (pageNumber) * pageSize);
                command.CommandText = roastercommand.Replace("WHERECommandC#", command.CommandText);
                using (var reader = command.ExecuteReader())
                {
                    while (reader.Read())
                    {
                        replays.Add(new A_RosterWithCount
                        {
                            Num = reader.GetInt32(reader.GetOrdinal("Num")),
                            Date = reader.GetDateTime(reader.GetOrdinal("Date")),
                            Playlist = reader.GetString(reader.GetOrdinal("Playlist")),
                            PlayerId = reader.GetString(reader.GetOrdinal("PlayerId")),
                            DisplayName = reader.GetString(reader.GetOrdinal("DisplayName")),
                            Lvl = reader.GetInt32(reader.GetOrdinal("Lvl")),
                            Place = reader.GetInt32(reader.GetOrdinal("Place")),
                            Anon = reader.GetInt32(reader.GetOrdinal("Anon")),
                            Platform = reader.IsDBNull(reader.GetOrdinal("Platform")) ? "" : reader.GetString(reader.GetOrdinal("Platform")),
                            Team = reader.GetInt32(reader.GetOrdinal("Team")),
                            Kills = reader.IsDBNull(reader.GetOrdinal("Kills")) ? 0 : reader.GetInt32(reader.GetOrdinal("Kills")),
                            BotKills = reader.IsDBNull(reader.GetOrdinal("BotKills")) ? 0 : reader.GetInt32(reader.GetOrdinal("BotKills")),
                            Crowns = reader.GetInt32(reader.GetOrdinal("Crowns")),
                            TeamMate = reader.GetString(reader.GetOrdinal("TeamMate")),
                            Skin = Path.Combine(Environment.CurrentDirectory, "Outfits", reader.GetString(reader.GetOrdinal("Skin")) + ".png"),
                            Count = reader.GetInt32(reader.GetOrdinal("Count")),
                            MetK = reader.GetString(reader.GetOrdinal("MetK")),
                            MetD = reader.GetString(reader.GetOrdinal("MetD")),
                            Season = reader.GetString(reader.GetOrdinal("Season")),
                            FileName = reader.GetString(reader.GetOrdinal("FileName")),
                        });
                    }
                }
            }

            return (replays, total_rows);
        }
        public (ObservableCollection<BetterKillfeed>,int) FilterAndPaginateBetterKillFeed(
            string fileName, string actioner, string actionee,
            string orderBy, bool ascending, int pageNumber, int pageSize)
        {
            var total_rows = 0;
            var replays = new ObservableCollection<BetterKillfeed>();
            using (var connection = new SqliteConnection(connectionString))
            {
                connection.Open();
                var command = connection.CreateCommand();

                // Base query
                command.CommandText = "PRAGMA cache_size = -1000000; PRAGMA synchronous = OFF; SELECT * FROM BetterKillfeed WHERE 1 = 1";

                // Add filters dynamically
                if (!string.IsNullOrEmpty(fileName))
                {
                    command.CommandText += " AND fileName LIKE @fileName";
                    command.Parameters.AddWithValue("@fileName", $"%{fileName}%");
                }
                if (!string.IsNullOrEmpty(actioner))
                {
                    command.CommandText += " AND actionerId LIKE @actioner";
                    command.Parameters.AddWithValue("@actioner", $"%{actioner}%");
                }
                if (!string.IsNullOrEmpty(actionee))
                {
                    command.CommandText += " AND actioneeId LIKE @actionee";
                    command.Parameters.AddWithValue("@actionee", $"%{actionee}%");
                }
                // Sorting
                if (!string.IsNullOrEmpty(orderBy))
                {
                    command.CommandText += $" ORDER BY {orderBy} {(ascending ? "ASC" : "DESC")}";
                }
                var command2 = connection.CreateCommand();
                command2.CommandText = command.CommandText.Replace("*", "COUNT(*)");
                command2.CommandType = command.CommandType;
                command2.Transaction = command.Transaction;
                foreach (SqliteParameter parameter in command.Parameters)
                {
                    var newParameter = new SqliteParameter
                    {
                        ParameterName = parameter.ParameterName,
                        Value = parameter.Value,
                        DbType = parameter.DbType,
                        Direction = parameter.Direction,
                        Size = parameter.Size,
                        IsNullable = parameter.IsNullable
                    };

                    command2.Parameters.Add(newParameter);
                }
                var resutl = command2.ExecuteScalar();
                if (resutl != null)
                {
                    total_rows = int.Parse(resutl.ToString());
                }
                // Pagination
                command.CommandText += " LIMIT @pageSize OFFSET @offset";
                command.Parameters.AddWithValue("@pageSize", pageSize);
                command.Parameters.AddWithValue("@offset", (pageNumber) * pageSize);

                using (var reader = command.ExecuteReader())
                {
                    while (reader.Read())
                    {
                        replays.Add(new BetterKillfeed
                        {
                            FileName = reader.GetString(reader.GetOrdinal("fileName")),
                            ActionNumber = reader.GetInt32(reader.GetOrdinal("actionNumber")),
                            Actioner = reader.GetString(reader.GetOrdinal("Actioner")),
                            Team1 = reader.GetInt32(reader.GetOrdinal("Team1")),
                            Actionee = reader.GetString(reader.GetOrdinal("Actionee")),
                            Team2 = reader.GetInt32(reader.GetOrdinal("Team2")),
                            Status = reader.GetString(reader.GetOrdinal("status")),
                            Action = reader.IsDBNull(reader.GetOrdinal("action")) ? null : reader.GetString(reader.GetOrdinal("action")),
                            Rarity = reader.GetString(reader.GetOrdinal("rarity")),
                            Weapon = reader.GetString(reader.GetOrdinal("weapon")),
                            POI = reader.IsDBNull(reader.GetOrdinal("POI")) ? null : reader.GetString(reader.GetOrdinal("POI")),
                            ActionTime = reader.GetFloat(reader.GetOrdinal("actionTime")),
                            ReplayDate = reader.GetDateTime(reader.GetOrdinal("replayDate")),
                            ActionerId = reader.GetString(reader.GetOrdinal("actionerId")),
                            ActioneeId = reader.GetString(reader.GetOrdinal("actioneeId"))
                        });
                    }
                }
            }

            return (replays,total_rows);
        }
        public ObservableCollection<AA_BetterReplays> GetAllReplays()
        {
            var replays = new ObservableCollection<AA_BetterReplays>();
            using (var connection = new SqliteConnection(connectionString))
            {
                connection.Open();
                var command = connection.CreateCommand();
                command.CommandText = "SELECT * FROM AA_BetterReplays";

                using (var reader = command.ExecuteReader())
                {
                    while (reader.Read())
                    {
                        replays.Add(new AA_BetterReplays
                        {
                            FileName = reader["FileName"].ToString(),
                            ReplayDate = DateTime.Parse(reader["ReplayDate"].ToString()),
                            Playlist = reader["Playlist"].ToString(),
                            Teammates = reader["Teammates"].ToString(),
                            GameTime = Convert.ToDouble(reader["GameTime"]),
                            Season = Convert.ToDouble(reader["Season"]),
                            BotCount = Convert.ToInt32(reader["BotCount"]),
                            Kills = Convert.ToInt32(reader["Kills"]),
                            BotKills = reader["BotKills"] != DBNull.Value ? Convert.ToInt32(reader["BotKills"]) : (int?)null,
                            Placement = Convert.ToInt32(reader["Placement"]),
                            Ended = reader["Ended"].ToString()
                        });
                    }
                }
            }
            return replays;
        }
        public ObservableCollection<AA_DistinctRoster> GetAllDistictRoaster()
        {
            var replays = new ObservableCollection<AA_DistinctRoster>();
            using (var connection = new SqliteConnection(connectionString))
            {
                connection.Open();
                var command = connection.CreateCommand();
                command.CommandText = "SELECT * FROM AA_DistinctRoster";

                using (var reader = command.ExecuteReader())
                {
                    while (reader.Read())
                    {
                        replays.Add(new AA_DistinctRoster
                        {
                            Num = reader.GetInt32(reader.GetOrdinal("Num")),
                            Date = reader.GetDateTime(reader.GetOrdinal("Date")),
                            Playlist = reader.GetString(reader.GetOrdinal("Playlist")),
                            PlayerId = reader.GetString(reader.GetOrdinal("PlayerId")),
                            DisplayName = reader.GetString(reader.GetOrdinal("DisplayName")),
                            Lvl = reader.GetInt32(reader.GetOrdinal("Lvl")),
                            Place = reader.GetInt32(reader.GetOrdinal("Place")),
                            Anon = reader.GetInt32(reader.GetOrdinal("Anon")),
                            Platform = reader.GetString(reader.GetOrdinal("Platform")),
                            Team = reader.GetInt32(reader.GetOrdinal("Team")),
                            Kills = reader.IsDBNull(reader.GetOrdinal("Kills")) ? (int?)null : reader.GetInt32(reader.GetOrdinal("Kills")),
                            BotKills = reader.IsDBNull(reader.GetOrdinal("BotKills")) ? (int?)null : reader.GetInt32(reader.GetOrdinal("BotKills")),
                            Crowns = reader.GetInt32(reader.GetOrdinal("Crowns")),
                            TeamMate = reader.GetString(reader.GetOrdinal("TeamMate")),
                            Skin = Path.Combine(Environment.CurrentDirectory, "Outfits", reader.GetString(reader.GetOrdinal("Skin")) + ".png"),
                            Count = reader.GetInt32(reader.GetOrdinal("Count")),
                            MetK = reader.GetString(reader.GetOrdinal("MetK")),
                            MetD = reader.GetString(reader.GetOrdinal("MetD")),
                            Season = reader.GetString(reader.GetOrdinal("Season"))
                        });
                    }
                }
            }
            return replays;
        }
        public ObservableCollection<BetterKillfeed> GetAllBetterKillfeed()
        {
            var replays = new ObservableCollection<BetterKillfeed>();
            using (var connection = new SqliteConnection(connectionString))
            {
                connection.Open();
                var command = connection.CreateCommand();
                command.CommandText = "SELECT * FROM BetterKillfeed";

                using (var reader = command.ExecuteReader())
                {
                    while (reader.Read())
                    {
                        replays.Add(new BetterKillfeed
                        {
                            FileName = reader.GetString(reader.GetOrdinal("fileName")),
                            ActionNumber = reader.GetInt32(reader.GetOrdinal("actionNumber")),
                            Actioner = reader.GetString(reader.GetOrdinal("Actioner")),
                            Team1 = reader.GetInt32(reader.GetOrdinal("Team1")),
                            Actionee = reader.GetString(reader.GetOrdinal("Actionee")),
                            Team2 = reader.GetInt32(reader.GetOrdinal("Team2")),
                            Status = reader.GetString(reader.GetOrdinal("status")),
                            Action = reader.IsDBNull(reader.GetOrdinal("action")) ? null : reader.GetString(reader.GetOrdinal("action")),
                            Rarity = reader.GetString(reader.GetOrdinal("rarity")),
                            Weapon = reader.GetString(reader.GetOrdinal("weapon")),
                            POI = reader.IsDBNull(reader.GetOrdinal("POI")) ? null : reader.GetString(reader.GetOrdinal("POI")),
                            ActionTime = reader.GetFloat(reader.GetOrdinal("actionTime")),
                            ReplayDate = reader.GetDateTime(reader.GetOrdinal("replayDate")),
                            ActionerId = reader.GetString(reader.GetOrdinal("actionerId")),
                            ActioneeId = reader.GetString(reader.GetOrdinal("actioneeId"))
                        });
                    }
                }
            }
            return replays;
        }

    }
}

================
File: MainWindow.xaml
================
<Window
    x:Class="SQLiteViewer.MainWindow"
    xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
    xmlns:d="http://schemas.microsoft.com/expression/blend/2008"
    xmlns:local="clr-namespace:SQLiteViewer"
    xmlns:materialDesign="http://materialdesigninxaml.net/winfx/xaml/themes"
    xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
    xmlns:templates="clr-namespace:SQLiteViewer.Templates"
    Title="SQLite Viewer"
    Width="1080"
    Height="1080"
    MinWidth="1080"
    MinHeight="700"
    AllowsTransparency="False"
    Background="Transparent"
    Loaded="Window_Loaded"
    StateChanged="Window_StateChanged"
    Style="{StaticResource MaterialDesignWindow}"
    WindowStartupLocation="CenterScreen"
    WindowStyle="None"
    mc:Ignorable="d">
    <Border x:Name="MainBorder" Background="{StaticResource Background}">
        <Grid>
            <Grid>
                <Grid.ColumnDefinitions>
                    <ColumnDefinition Width="0" />
                    <ColumnDefinition Width="*" />
                </Grid.ColumnDefinitions>
                <Grid Grid.Column="1">
                    <Grid.RowDefinitions>
                        <RowDefinition Height="auto" />
                        <RowDefinition Height="*" />
                    </Grid.RowDefinitions>
                    <Grid x:Name="HeaderGrid">
                        <Border
                            x:Name="DraggableGrid"
                            Width="auto"
                            Height="auto"
                            Margin="0,0,50,0"
                            HorizontalAlignment="Stretch"
                            VerticalAlignment="Stretch"
                            Background="{StaticResource Background}"
                            Cursor="SizeAll"
                            MouseLeftButtonDown="DraggableGrid_MouseLeftButtonDown" />
                        <StackPanel
                            Margin="35,10"
                            HorizontalAlignment="Right"
                            VerticalAlignment="Center"
                            Orientation="Horizontal">
                            <Button
                                Width="18"
                                Height="18"
                                Margin="7"
                                VerticalAlignment="Center"
                                Click="Button_Click_8"
                                Style="{StaticResource StarButtonStyle}">
                                <materialDesign:PackIcon
                                    Width="18"
                                    Height="18"
                                    Foreground="{StaticResource foreground}"
                                    Kind="WindowMinimize" />
                            </Button>
                            <Button
                                Width="18"
                                Height="18"
                                Margin="7"
                                VerticalAlignment="Center"
                                Click="Button_Click_7"
                                Style="{StaticResource StarButtonStyle}">
                                <materialDesign:PackIcon
                                    Width="18"
                                    Height="18"
                                    Foreground="{StaticResource foreground}"
                                    Kind="WindowMaximize" />
                            </Button>
                            <Button
                                Width="18"
                                Height="18"
                                Margin="7"
                                VerticalAlignment="Center"
                                Click="Button_Click_6"
                                Style="{StaticResource StarButtonStyle}">
                                <materialDesign:PackIcon
                                    Width="18"
                                    Height="18"
                                    Foreground="{StaticResource foreground}"
                                    Kind="WindowClose" />
                            </Button>
                        </StackPanel>
                    </Grid>
                    <Grid Grid.Row="1">
                        <ScrollViewer
                            Margin="0 50 0 0"
                            x:Name="scrollViewer"
                            Grid.Row="1"
                            Width="auto"
                            Height="auto"
                            Style="{StaticResource ScrollStyle}"
                            VerticalScrollBarVisibility="Disabled" />
                    </Grid>
                </Grid>
                <StackPanel
                    x:Name="IconGrid"
                    Grid.Column="1"
                    HorizontalAlignment="Left"
                    VerticalAlignment="Top"
                    Orientation="Horizontal">
                    <Image
                        Width="42"
                        Height="36"
                        Margin="25"
                        VerticalAlignment="Top"
                        RenderOptions.BitmapScalingMode="HighQuality"
                        Source="pack://application:,,,/Resources/bot.png" />
                    <StackPanel
                        Margin="100,0,0,0"
                        VerticalAlignment="Top"
                        Orientation="Horizontal">
                        <templates:IconCard
                            x:Name="homeBtn"
                            ImageSource="pack://application:,,,/Resources/home.png"
                            Navigate="homeBtn_Navigate" />
                        <templates:IconCard
                            x:Name="featureBtn"
                            ImageSource="pack://application:,,,/Resources/rocket.png"
                            Navigate="featureBtn_Navigate"
                            Visibility="Collapsed" />
                        <templates:IconCard
                            x:Name="backupBtn"
                            ImageSource="pack://application:,,,/Resources/screen.png"
                            Navigate="backupBtn_Navigate" />
                        <templates:IconCard
                            x:Name="settingsBtn"
                            ImageSource="pack://application:,,,/Resources/settings.png"
                            Navigate="settingsBtn_Navigate" />
                    </StackPanel>
                </StackPanel>
            </Grid>
            <materialDesign:DialogHost
                x:Name="FilterDialogHost"
                CloseOnClickAway="True"
                DialogBackground="Transparent"
                DialogTheme="Dark"
                Identifier="FilterDialogHost" />
        </Grid>
    </Border>


</Window>

================
File: MainWindow.xaml.cs
================
using System.ComponentModel;
using System.Diagnostics;
using System.IO;
using System.Runtime.InteropServices;
using System.Security.AccessControl;
using System.Text;
using System.Web;
using System.Windows;
using System.Windows.Controls;
using System.Windows.Data;
using System.Windows.Documents;
using System.Windows.Input;
using System.Windows.Interop;
using System.Windows.Markup;
using System.Security.Cryptography;
using System.Windows.Media;
using System.Windows.Media.Animation;
using System.Windows.Media.Imaging;
using System.Windows.Navigation;
using System.Windows.Threading;

using MaterialDesignThemes.Wpf;

using SQLiteViewer.Properties;
using SQLiteViewer.Templates;
using static MaterialDesignThemes.Wpf.Theme;

namespace SQLiteViewer
{
    /// <summary>
    /// Interaction logic for MainWindow.xaml
    /// </summary>

    public partial class MainWindow : Window
    {
        public List<UserControl> Pages { get; set; }
        public Storyboard slideInStoryboard;
        public Storyboard slideInLeftStoryboard;
        public Storyboard slideInTopStoryboard;
        public MainWindow()
        {
            try
            {
                InitializeComponent();
                double screenHeight = SystemParameters.PrimaryScreenHeight;
                if (screenHeight < 1080)
                {
                    this.Height = 820;
                }
                if (screenHeight < 850)
                {
                    this.Height = 700;
                }
            }
            catch (Exception ex)
            {
                MessageBox.Show($"MainWindow Error: {ex.StackTrace}", "Error", MessageBoxButton.OK, MessageBoxImage.Error);

            }

        }

        private async void Window_Loaded(object sender, RoutedEventArgs e)
        {
            try
            {
                slideInStoryboard = (Storyboard)FindResource("SlideInFromRight");
                slideInLeftStoryboard = (Storyboard)FindResource("SlideInFromLeft");
                slideInTopStoryboard = (Storyboard)FindResource("SlideInFromTop");
                Pages = new List<UserControl>();
                //BeginSlidingTop(HeaderGrid);
                //BeginSlidingLeft(IconGrid);
                homeBtn.IsSelected = true;
                NavigateTo(new AA_BetterReplaysUC());
            }
            catch (Exception ex)
            {
                ShowError(ex.Message);
            }
        }
        public void BeginSliding(UserControl element)
        {
            if (slideInStoryboard != null)
            {
                element.RenderTransform = new TranslateTransform();
                slideInStoryboard.Begin(element);
            }
        }
        public void BeginSlidingLeft(Grid element)
        {
            if (slideInStoryboard != null)
            {
                element.RenderTransform = new TranslateTransform();
                slideInLeftStoryboard.Begin(element);
            }
        }
        public void BeginSlidingTop(Grid element)
        {
            if (slideInStoryboard != null)
            {
                element.RenderTransform = new TranslateTransform();
                slideInTopStoryboard.Begin(element);
            }
        }
        public void ShowError(string message)
        {
            MessageBox.Show(message);
        }
        public void UnSelectAll()
        {
            homeBtn.IsSelected = false;
            featureBtn.IsSelected = false;
            backupBtn.IsSelected = false;
            settingsBtn.IsSelected = false;

        }
        private void homeBtn_Navigate(object sender, EventArgs e)
        {
            try
            {
                UnSelectAll();
                var iconCard = (IconCard)sender;
                iconCard.IsSelected = true;
                var dashboard = new AA_BetterReplaysUC();

                NavigateTo(dashboard);
                scrollViewer.ScrollToTop();
            }
            catch (Exception ex)
            {
                ShowError(ex.Message);
            }

        }

        private void featureBtn_Navigate(object sender, EventArgs e)
        {
            try
            {
                UnSelectAll();
                var iconCard = (IconCard)sender;
                iconCard.IsSelected = true;
                NavigateTo(new AA_DistinctRosterFilterControl());
                scrollViewer.ScrollToTop();
            }
            catch (Exception ex)
            {
                ShowError(ex.Message);
            }


        }

        private void backupBtn_Navigate(object sender, EventArgs e)
        {
            try
            {
                UnSelectAll();
                var iconCard = (IconCard)sender;
                iconCard.IsSelected = true;
                NavigateTo(new BetterKillfeedFilterControl());
                scrollViewer.ScrollToTop();
            }
            catch (Exception ex)
            {
                ShowError(ex.Message);
            }


        }

        private void settingsBtn_Navigate(object sender, EventArgs e)
        {
            try
            {
                UnSelectAll();
                var iconCard = (IconCard)sender;
                iconCard.IsSelected = true;
                NavigateTo(new A_RosterWithCountUC());
                scrollViewer.ScrollToTop();
            }
            catch (Exception ex)
            {
                ShowError(ex.Message);
            }

        }

        public async void NavigateTo(UserControl newControl)
        {
            newControl.Style = FindResource("TransitioningUserControl") as Style;
            if (scrollViewer.Content != null)
            {
                var oldControl = scrollViewer.Content as UserControl;
                if (oldControl != null)
                {
                    var storyboard = new Storyboard();
                    var fadeOutAnimation = new DoubleAnimation(1, 0, new Duration(TimeSpan.FromSeconds(0)));
                    fadeOutAnimation.Completed += (s, e) =>
                    {
                        scrollViewer.Content = newControl;
                    };
                    storyboard.Children.Add(fadeOutAnimation);
                    Storyboard.SetTarget(fadeOutAnimation, oldControl);
                    Storyboard.SetTargetProperty(fadeOutAnimation, new PropertyPath(UserControl.OpacityProperty));
                    storyboard.Begin();
                    await Task.Delay(500);
                    scrollViewer.Content = newControl;
                    scrollViewer.ScrollToTop();
                }
            }
            else
            {
                scrollViewer.Content = newControl;
            }
        }

        private void DraggableGrid_MouseLeftButtonDown(object sender, MouseButtonEventArgs e)
        {
            if (e.ButtonState == MouseButtonState.Pressed)
            {
                // Begin dragging the window
                this.DragMove();
            }
        }

        private void Window_StateChanged(object sender, EventArgs e)
        {
            if (this.WindowState == WindowState.Maximized)
            {
                MainBorder.CornerRadius = new CornerRadius(0);
            }
            else
            {
                MainBorder.CornerRadius = new CornerRadius(50);
            }
        }

        private void Button_Click_6(object sender, RoutedEventArgs e)
        {
            //Settings.Default.Reset();
            Application.Current.Shutdown();
        }

        private void Button_Click_7(object sender, RoutedEventArgs e)
        {
            if (this.WindowState == WindowState.Normal)
            {
                this.WindowState = WindowState.Maximized;
            }
            else
            {
                this.WindowState = WindowState.Normal;
            }
        }

        private void Button_Click_8(object sender, RoutedEventArgs e)
        {
            this.WindowState = WindowState.Minimized;
        }

        protected override void OnClosing(CancelEventArgs e)
        {
            //Settings.Default.Reset();

            Application.Current.Shutdown();
        }

        //############################################# Windows Resize #################################################
        protected override void OnSourceInitialized(EventArgs e)
        {
            base.OnSourceInitialized(e);

            IntPtr hwnd = new WindowInteropHelper(this).Handle;
            HwndSource.FromHwnd(hwnd)?.AddHook(new HwndSourceHook(WindowProc));
        }

        private IntPtr WindowProc(IntPtr hwnd, int msg, IntPtr wParam, IntPtr lParam, ref bool handled)
        {
            const int HTLEFT = 10;
            const int HTRIGHT = 11;
            const int HTTOP = 12;
            const int HTTOPLEFT = 13;
            const int HTTOPRIGHT = 14;
            const int HTBOTTOM = 15;
            const int HTBOTTOMLEFT = 16;
            const int HTBOTTOMRIGHT = 17;
            const int WM_NCHITTEST = 0x0084;

            if (msg == WM_NCHITTEST)
            {
                POINT mousePos = GetMousePosition();
                Rect windowRect = new Rect(this.Left, this.Top, this.ActualWidth, this.ActualHeight);

                const int RESIZE_BORDER_THICKNESS = 10;

                if (mousePos.Y >= windowRect.Top && mousePos.Y < windowRect.Top + RESIZE_BORDER_THICKNESS)
                {
                    if (mousePos.X >= windowRect.Left && mousePos.X < windowRect.Left + RESIZE_BORDER_THICKNESS)
                    {
                        handled = true;
                        return (IntPtr)HTTOPLEFT;
                    }
                    if (mousePos.X >= windowRect.Right - RESIZE_BORDER_THICKNESS && mousePos.X < windowRect.Right)
                    {
                        handled = true;
                        return (IntPtr)HTTOPRIGHT;
                    }
                    handled = true;
                    return (IntPtr)HTTOP;
                }
                if (mousePos.Y >= windowRect.Bottom - RESIZE_BORDER_THICKNESS && mousePos.Y < windowRect.Bottom)
                {
                    if (mousePos.X >= windowRect.Left && mousePos.X < windowRect.Left + RESIZE_BORDER_THICKNESS)
                    {
                        handled = true;
                        return (IntPtr)HTBOTTOMLEFT;
                    }
                    if (mousePos.X >= windowRect.Right - RESIZE_BORDER_THICKNESS && mousePos.X < windowRect.Right)
                    {
                        handled = true;
                        return (IntPtr)HTBOTTOMRIGHT;
                    }
                    handled = true;
                    return (IntPtr)HTBOTTOM;
                }
                if (mousePos.X >= windowRect.Left && mousePos.X < windowRect.Left + RESIZE_BORDER_THICKNESS)
                {
                    handled = true;
                    return (IntPtr)HTLEFT;
                }
                if (mousePos.X >= windowRect.Right - RESIZE_BORDER_THICKNESS && mousePos.X < windowRect.Right)
                {
                    handled = true;
                    return (IntPtr)HTRIGHT;
                }
            }

            return IntPtr.Zero;
        }

        private POINT GetMousePosition()
        {
            GetCursorPos(out POINT lpPoint);
            return lpPoint;
        }

        [DllImport("user32.dll")]
        [return: MarshalAs(UnmanagedType.Bool)]
        private static extern bool GetCursorPos(out POINT lpPoint);

        [StructLayout(LayoutKind.Sequential)]
        public struct POINT
        {
            public int X;
            public int Y;
        }

        private void MainBorder_SizeChanged(object sender, SizeChangedEventArgs e)
        {
            var border = sender as Border;
            if (border != null)
            {
                // Adjust the Clip based on the new size
                border.Clip = new RectangleGeometry
                {
                    Rect = new Rect(0, 0, border.ActualWidth, border.ActualHeight),
                    RadiusX = border.CornerRadius.TopLeft,
                    RadiusY = border.CornerRadius.TopLeft
                };
            }
        }
    }
}

================
File: SQLiteViewer.csproj
================
<Project Sdk="Microsoft.NET.Sdk">

  <PropertyGroup>
    <OutputType>WinExe</OutputType>
    <TargetFramework>net8.0-windows</TargetFramework>
    <Nullable>enable</Nullable>
    <ImplicitUsings>enable</ImplicitUsings>
    <UseWPF>true</UseWPF>
    <ApplicationIcon>bot.ico</ApplicationIcon>
  </PropertyGroup>

  <ItemGroup>
    <PackageReference Include="Microsoft.Data.Sqlite.Core" Version="8.0.8" />
    <PackageReference Include="SQLite" Version="3.13.0" />
    <PackageReference Include="SQLitePCLRaw.bundle_e_sqlite3" Version="2.1.10" />
    <PackageReference Include="System.Data.SQLite" Version="1.0.118" />
  </ItemGroup>

  <ItemGroup>
    <None Remove="Resources\bluex.png" />
    <None Remove="Resources\bot.png" />
    <None Remove="Resources\Character_AbstractMirror_Rogue.png" />
    <None Remove="Resources\Character_AccentWall.png" />
    <None Remove="Resources\ghost.png" />
    <None Remove="Resources\glow.png" />
    <None Remove="Resources\home.png" />
    <None Remove="Resources\redglow.png" />
    <None Remove="Resources\rocket.png" />
    <None Remove="Resources\screen.png" />
    <None Remove="Resources\settings.png" />
  </ItemGroup>

  <ItemGroup>
    <Content Include="bot.ico" />
  </ItemGroup>

  <ItemGroup>
    <PackageReference Include="MaterialDesignExtensions" Version="3.3.0" />
    <PackageReference Include="MaterialDesignThemes" Version="5.1.0" />
    <PackageReference Include="System.Drawing.Common" Version="8.0.10" />
  </ItemGroup>

  <ItemGroup>
    <Resource Include="Overlays\bluex.png" />
    <Resource Include="Resources\bluex.png" />
    <Resource Include="Resources\bot.png" />
    <Resource Include="Resources\Character_AbstractMirror_Rogue.png" />
    <Resource Include="Resources\Character_AccentWall.png" />
    <Resource Include="Overlays\ghost.png" />
    <Resource Include="Overlays\glow.png" />
    <Resource Include="Resources\ghost.png" />
    <Resource Include="Resources\glow.png" />
    <Resource Include="Resources\home.png" />
    <Resource Include="Overlays\redglow.png" />
    <Resource Include="Resources\redglow.png" />
    <Resource Include="Resources\rocket.png" />
    <Resource Include="Resources\screen.png" />
    <Resource Include="Resources\settings.png" />
  </ItemGroup>

  <ItemGroup>
    <Compile Update="BetterKillfeedDialog.xaml.cs">
      <SubType>Code</SubType>
    </Compile>
    <Compile Update="AA_DistinctRosterDialog.xaml.cs">
      <SubType>Code</SubType>
    </Compile>
    <Compile Update="Properties\Resources.Designer.cs">
      <DesignTime>True</DesignTime>
      <AutoGen>True</AutoGen>
      <DependentUpon>Resources.resx</DependentUpon>
    </Compile>
    <Compile Update="Properties\Settings.Designer.cs">
      <DesignTimeSharedInput>True</DesignTimeSharedInput>
      <AutoGen>True</AutoGen>
      <DependentUpon>Settings.settings</DependentUpon>
    </Compile>
  </ItemGroup>

  <ItemGroup>
    <EmbeddedResource Update="Properties\Resources.resx">
      <Generator>ResXFileCodeGenerator</Generator>
      <LastGenOutput>Resources.Designer.cs</LastGenOutput>
    </EmbeddedResource>
  </ItemGroup>

  <ItemGroup>
    <None Update="Database.db">
      <CopyToOutputDirectory>PreserveNewest</CopyToOutputDirectory>
    </None>
    <None Update="Properties\Settings.settings">
      <Generator>SettingsSingleFileGenerator</Generator>
      <LastGenOutput>Settings.Designer.cs</LastGenOutput>
    </None>
  </ItemGroup>

</Project>

================
File: Properties\Resources.Designer.cs
================
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace SQLiteViewer.Properties {
    using System;
    
    
    /// <summary>
    ///   A strongly-typed resource class, for looking up localized strings, etc.
    /// </summary>
    // This class was auto-generated by the StronglyTypedResourceBuilder
    // class via a tool like ResGen or Visual Studio.
    // To add or remove a member, edit your .ResX file then rerun ResGen
    // with the /str option, or rebuild your VS project.
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Resources.Tools.StronglyTypedResourceBuilder", "17.0.0.0")]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    internal class Resources {
        
        private static global::System.Resources.ResourceManager resourceMan;
        
        private static global::System.Globalization.CultureInfo resourceCulture;
        
        [global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode")]
        internal Resources() {
        }
        
        /// <summary>
        ///   Returns the cached ResourceManager instance used by this class.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        internal static global::System.Resources.ResourceManager ResourceManager {
            get {
                if (object.ReferenceEquals(resourceMan, null)) {
                    global::System.Resources.ResourceManager temp = new global::System.Resources.ResourceManager("SQLiteViewer.Properties.Resources", typeof(Resources).Assembly);
                    resourceMan = temp;
                }
                return resourceMan;
            }
        }
        
        /// <summary>
        ///   Overrides the current thread's CurrentUICulture property for all
        ///   resource lookups using this strongly typed resource class.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        internal static global::System.Globalization.CultureInfo Culture {
            get {
                return resourceCulture;
            }
            set {
                resourceCulture = value;
            }
        }
        
        /// <summary>
        ///   Looks up a localized resource of type System.Byte[].
        /// </summary>
        internal static byte[] bluex {
            get {
                object obj = ResourceManager.GetObject("bluex", resourceCulture);
                return ((byte[])(obj));
            }
        }
        
        /// <summary>
        ///   Looks up a localized resource of type System.Byte[].
        /// </summary>
        internal static byte[] bot {
            get {
                object obj = ResourceManager.GetObject("bot", resourceCulture);
                return ((byte[])(obj));
            }
        }
        
        /// <summary>
        ///   Looks up a localized resource of type System.Byte[].
        /// </summary>
        internal static byte[] Character_AbstractMirror_Rogue {
            get {
                object obj = ResourceManager.GetObject("Character_AbstractMirror_Rogue", resourceCulture);
                return ((byte[])(obj));
            }
        }
        
        /// <summary>
        ///   Looks up a localized resource of type System.Byte[].
        /// </summary>
        internal static byte[] Character_AccentWall {
            get {
                object obj = ResourceManager.GetObject("Character_AccentWall", resourceCulture);
                return ((byte[])(obj));
            }
        }
        
        /// <summary>
        ///   Looks up a localized resource of type System.Byte[].
        /// </summary>
        internal static byte[] ghost {
            get {
                object obj = ResourceManager.GetObject("ghost", resourceCulture);
                return ((byte[])(obj));
            }
        }
        
        /// <summary>
        ///   Looks up a localized resource of type System.Byte[].
        /// </summary>
        internal static byte[] glow {
            get {
                object obj = ResourceManager.GetObject("glow", resourceCulture);
                return ((byte[])(obj));
            }
        }
        
        /// <summary>
        ///   Looks up a localized resource of type System.Byte[].
        /// </summary>
        internal static byte[] home {
            get {
                object obj = ResourceManager.GetObject("home", resourceCulture);
                return ((byte[])(obj));
            }
        }
        
        /// <summary>
        ///   Looks up a localized resource of type System.Byte[].
        /// </summary>
        internal static byte[] redglow {
            get {
                object obj = ResourceManager.GetObject("redglow", resourceCulture);
                return ((byte[])(obj));
            }
        }
        
        /// <summary>
        ///   Looks up a localized resource of type System.Byte[].
        /// </summary>
        internal static byte[] redx {
            get {
                object obj = ResourceManager.GetObject("redx", resourceCulture);
                return ((byte[])(obj));
            }
        }
        
        /// <summary>
        ///   Looks up a localized resource of type System.Byte[].
        /// </summary>
        internal static byte[] rocket {
            get {
                object obj = ResourceManager.GetObject("rocket", resourceCulture);
                return ((byte[])(obj));
            }
        }
        
        /// <summary>
        ///   Looks up a localized resource of type System.Byte[].
        /// </summary>
        internal static byte[] screen {
            get {
                object obj = ResourceManager.GetObject("screen", resourceCulture);
                return ((byte[])(obj));
            }
        }
        
        /// <summary>
        ///   Looks up a localized resource of type System.Byte[].
        /// </summary>
        internal static byte[] settings {
            get {
                object obj = ResourceManager.GetObject("settings", resourceCulture);
                return ((byte[])(obj));
            }
        }
    }
}

================
File: Properties\Resources.resx
================
<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <assembly alias="System.Windows.Forms" name="System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
  <data name="bluex" type="System.Resources.ResXFileRef, System.Windows.Forms">
    <value>..\Resources\bluex.png;System.Byte[], mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </data>
  <data name="bot" type="System.Resources.ResXFileRef, System.Windows.Forms">
    <value>..\Resources\bot.png;System.Byte[], mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </data>
  <data name="Character_AbstractMirror_Rogue" type="System.Resources.ResXFileRef, System.Windows.Forms">
    <value>..\Resources\Character_AbstractMirror_Rogue.png;System.Byte[], mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </data>
  <data name="Character_AccentWall" type="System.Resources.ResXFileRef, System.Windows.Forms">
    <value>..\Resources\Character_AccentWall.png;System.Byte[], mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </data>
  <data name="ghost" type="System.Resources.ResXFileRef, System.Windows.Forms">
    <value>..\Resources\ghost.png;System.Byte[], mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </data>
  <data name="glow" type="System.Resources.ResXFileRef, System.Windows.Forms">
    <value>..\Resources\glow.png;System.Byte[], mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </data>
  <data name="home" type="System.Resources.ResXFileRef, System.Windows.Forms">
    <value>..\Resources\home.png;System.Byte[], mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </data>
  <data name="redglow" type="System.Resources.ResXFileRef, System.Windows.Forms">
    <value>..\Resources\redglow.png;System.Byte[], mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </data>
  <data name="redx" type="System.Resources.ResXFileRef, System.Windows.Forms">
    <value>..\Resources\redx.png;System.Byte[], mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </data>
  <data name="rocket" type="System.Resources.ResXFileRef, System.Windows.Forms">
    <value>..\Resources\rocket.png;System.Byte[], mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </data>
  <data name="screen" type="System.Resources.ResXFileRef, System.Windows.Forms">
    <value>..\Resources\screen.png;System.Byte[], mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </data>
  <data name="settings" type="System.Resources.ResXFileRef, System.Windows.Forms">
    <value>..\Resources\settings.png;System.Byte[], mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </data>
</root>

================
File: Properties\Settings.Designer.cs
================
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace SQLiteViewer.Properties {
    
    
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.VisualStudio.Editors.SettingsDesigner.SettingsSingleFileGenerator", "17.10.0.0")]
    internal sealed partial class Settings : global::System.Configuration.ApplicationSettingsBase {
        
        private static Settings defaultInstance = ((Settings)(global::System.Configuration.ApplicationSettingsBase.Synchronized(new Settings())));
        
        public static Settings Default {
            get {
                return defaultInstance;
            }
        }
        
        [global::System.Configuration.UserScopedSettingAttribute()]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public global::System.DateTime BetterReplayDateFrom {
            get {
                return ((global::System.DateTime)(this["BetterReplayDateFrom"]));
            }
            set {
                this["BetterReplayDateFrom"] = value;
            }
        }
        
        [global::System.Configuration.UserScopedSettingAttribute()]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.Configuration.DefaultSettingValueAttribute("0")]
        public int BetterReplayKillsFrom {
            get {
                return ((int)(this["BetterReplayKillsFrom"]));
            }
            set {
                this["BetterReplayKillsFrom"] = value;
            }
        }
        
        [global::System.Configuration.UserScopedSettingAttribute()]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.Configuration.DefaultSettingValueAttribute("")]
        public string BetterReplayPlaylist {
            get {
                return ((string)(this["BetterReplayPlaylist"]));
            }
            set {
                this["BetterReplayPlaylist"] = value;
            }
        }
        
        [global::System.Configuration.UserScopedSettingAttribute()]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public global::System.DateTime BetterReplayDateTo {
            get {
                return ((global::System.DateTime)(this["BetterReplayDateTo"]));
            }
            set {
                this["BetterReplayDateTo"] = value;
            }
        }
        
        [global::System.Configuration.UserScopedSettingAttribute()]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.Configuration.DefaultSettingValueAttribute("0")]
        public int BetterReplayKillsTo {
            get {
                return ((int)(this["BetterReplayKillsTo"]));
            }
            set {
                this["BetterReplayKillsTo"] = value;
            }
        }
        
        [global::System.Configuration.UserScopedSettingAttribute()]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.Configuration.DefaultSettingValueAttribute("0")]
        public double BetterReplaySeason {
            get {
                return ((double)(this["BetterReplaySeason"]));
            }
            set {
                this["BetterReplaySeason"] = value;
            }
        }
        
        [global::System.Configuration.UserScopedSettingAttribute()]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.Configuration.DefaultSettingValueAttribute("0")]
        public int BetterReplayPlacement {
            get {
                return ((int)(this["BetterReplayPlacement"]));
            }
            set {
                this["BetterReplayPlacement"] = value;
            }
        }
        
        [global::System.Configuration.UserScopedSettingAttribute()]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.Configuration.DefaultSettingValueAttribute("0")]
        public int MinKillsTextBox {
            get {
                return ((int)(this["MinKillsTextBox"]));
            }
            set {
                this["MinKillsTextBox"] = value;
            }
        }
        
        [global::System.Configuration.UserScopedSettingAttribute()]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.Configuration.DefaultSettingValueAttribute("0")]
        public int TeamTextBox {
            get {
                return ((int)(this["TeamTextBox"]));
            }
            set {
                this["TeamTextBox"] = value;
            }
        }
        
        [global::System.Configuration.UserScopedSettingAttribute()]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.Configuration.DefaultSettingValueAttribute("")]
        public string PlatformComboBox {
            get {
                return ((string)(this["PlatformComboBox"]));
            }
            set {
                this["PlatformComboBox"] = value;
            }
        }
        
        [global::System.Configuration.UserScopedSettingAttribute()]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.Configuration.DefaultSettingValueAttribute("0")]
        public int MinPlaceTextBox {
            get {
                return ((int)(this["MinPlaceTextBox"]));
            }
            set {
                this["MinPlaceTextBox"] = value;
            }
        }
        
        [global::System.Configuration.UserScopedSettingAttribute()]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.Configuration.DefaultSettingValueAttribute("0")]
        public int MaxPlaceTextBox {
            get {
                return ((int)(this["MaxPlaceTextBox"]));
            }
            set {
                this["MaxPlaceTextBox"] = value;
            }
        }
        
        [global::System.Configuration.UserScopedSettingAttribute()]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.Configuration.DefaultSettingValueAttribute("0")]
        public int MinLvlTextBox {
            get {
                return ((int)(this["MinLvlTextBox"]));
            }
            set {
                this["MinLvlTextBox"] = value;
            }
        }
        
        [global::System.Configuration.UserScopedSettingAttribute()]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.Configuration.DefaultSettingValueAttribute("0")]
        public int MaxLvlTextBox {
            get {
                return ((int)(this["MaxLvlTextBox"]));
            }
            set {
                this["MaxLvlTextBox"] = value;
            }
        }
        
        [global::System.Configuration.UserScopedSettingAttribute()]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.Configuration.DefaultSettingValueAttribute("0")]
        public int MinActionNumberTextBox {
            get {
                return ((int)(this["MinActionNumberTextBox"]));
            }
            set {
                this["MinActionNumberTextBox"] = value;
            }
        }
        
        [global::System.Configuration.UserScopedSettingAttribute()]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.Configuration.DefaultSettingValueAttribute("0")]
        public int MaxActionNumberTextBox {
            get {
                return ((int)(this["MaxActionNumberTextBox"]));
            }
            set {
                this["MaxActionNumberTextBox"] = value;
            }
        }
        
        [global::System.Configuration.UserScopedSettingAttribute()]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.Configuration.DefaultSettingValueAttribute("")]
        public string StatusComboBox {
            get {
                return ((string)(this["StatusComboBox"]));
            }
            set {
                this["StatusComboBox"] = value;
            }
        }
        
        [global::System.Configuration.UserScopedSettingAttribute()]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.Configuration.DefaultSettingValueAttribute("")]
        public string RarityComboBox {
            get {
                return ((string)(this["RarityComboBox"]));
            }
            set {
                this["RarityComboBox"] = value;
            }
        }
        
        [global::System.Configuration.UserScopedSettingAttribute()]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.Configuration.DefaultSettingValueAttribute("")]
        public string WeaponTextBox {
            get {
                return ((string)(this["WeaponTextBox"]));
            }
            set {
                this["WeaponTextBox"] = value;
            }
        }
        
        [global::System.Configuration.UserScopedSettingAttribute()]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.Configuration.DefaultSettingValueAttribute("")]
        public string POITextBox {
            get {
                return ((string)(this["POITextBox"]));
            }
            set {
                this["POITextBox"] = value;
            }
        }
        
        [global::System.Configuration.UserScopedSettingAttribute()]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.Configuration.DefaultSettingValueAttribute("True")]
        public bool IsBotFilter {
            get {
                return ((bool)(this["IsBotFilter"]));
            }
            set {
                this["IsBotFilter"] = value;
            }
        }
        
        [global::System.Configuration.UserScopedSettingAttribute()]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.Configuration.DefaultSettingValueAttribute("True")]
        public bool IsTeamFilter {
            get {
                return ((bool)(this["IsTeamFilter"]));
            }
            set {
                this["IsTeamFilter"] = value;
            }
        }
        
        [global::System.Configuration.UserScopedSettingAttribute()]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.Configuration.DefaultSettingValueAttribute("True")]
        public bool IsAnonFilter {
            get {
                return ((bool)(this["IsAnonFilter"]));
            }
            set {
                this["IsAnonFilter"] = value;
            }
        }
        
        [global::System.Configuration.UserScopedSettingAttribute()]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.Configuration.DefaultSettingValueAttribute("")]
        public string FileNameFilter {
            get {
                return ((string)(this["FileNameFilter"]));
            }
            set {
                this["FileNameFilter"] = value;
            }
        }
        
        [global::System.Configuration.UserScopedSettingAttribute()]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public global::System.DateTime ReplayDateFilter {
            get {
                return ((global::System.DateTime)(this["ReplayDateFilter"]));
            }
            set {
                this["ReplayDateFilter"] = value;
            }
        }
        
        [global::System.Configuration.UserScopedSettingAttribute()]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.Configuration.DefaultSettingValueAttribute("")]
        public string DisplayNameFilter {
            get {
                return ((string)(this["DisplayNameFilter"]));
            }
            set {
                this["DisplayNameFilter"] = value;
            }
        }
        
        [global::System.Configuration.UserScopedSettingAttribute()]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.Configuration.DefaultSettingValueAttribute("")]
        public string ActionerFilter {
            get {
                return ((string)(this["ActionerFilter"]));
            }
            set {
                this["ActionerFilter"] = value;
            }
        }
        
        [global::System.Configuration.UserScopedSettingAttribute()]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.Configuration.DefaultSettingValueAttribute("")]
        public string ActioneeFilter {
            get {
                return ((string)(this["ActioneeFilter"]));
            }
            set {
                this["ActioneeFilter"] = value;
            }
        }
    }
}

================
File: Properties\Settings.settings
================
<?xml version='1.0' encoding='utf-8'?>
<SettingsFile xmlns="http://schemas.microsoft.com/VisualStudio/2004/01/settings" CurrentProfile="(Default)" GeneratedClassNamespace="SQLiteViewer.Properties" GeneratedClassName="Settings">
  <Profiles />
  <Settings>
    <Setting Name="BetterReplayDateFrom" Type="System.DateTime" Scope="User">
      <Value Profile="(Default)" />
    </Setting>
    <Setting Name="BetterReplayKillsFrom" Type="System.Int32" Scope="User">
      <Value Profile="(Default)">0</Value>
    </Setting>
    <Setting Name="BetterReplayPlaylist" Type="System.String" Scope="User">
      <Value Profile="(Default)" />
    </Setting>
    <Setting Name="BetterReplayDateTo" Type="System.DateTime" Scope="User">
      <Value Profile="(Default)" />
    </Setting>
    <Setting Name="BetterReplayKillsTo" Type="System.Int32" Scope="User">
      <Value Profile="(Default)">0</Value>
    </Setting>
    <Setting Name="BetterReplaySeason" Type="System.Double" Scope="User">
      <Value Profile="(Default)">0</Value>
    </Setting>
    <Setting Name="BetterReplayPlacement" Type="System.Int32" Scope="User">
      <Value Profile="(Default)">0</Value>
    </Setting>
    <Setting Name="MinKillsTextBox" Type="System.Int32" Scope="User">
      <Value Profile="(Default)">0</Value>
    </Setting>
    <Setting Name="TeamTextBox" Type="System.Int32" Scope="User">
      <Value Profile="(Default)">0</Value>
    </Setting>
    <Setting Name="PlatformComboBox" Type="System.String" Scope="User">
      <Value Profile="(Default)" />
    </Setting>
    <Setting Name="MinPlaceTextBox" Type="System.Int32" Scope="User">
      <Value Profile="(Default)">0</Value>
    </Setting>
    <Setting Name="MaxPlaceTextBox" Type="System.Int32" Scope="User">
      <Value Profile="(Default)">0</Value>
    </Setting>
    <Setting Name="MinLvlTextBox" Type="System.Int32" Scope="User">
      <Value Profile="(Default)">0</Value>
    </Setting>
    <Setting Name="MaxLvlTextBox" Type="System.Int32" Scope="User">
      <Value Profile="(Default)">0</Value>
    </Setting>
    <Setting Name="MinActionNumberTextBox" Type="System.Int32" Scope="User">
      <Value Profile="(Default)">0</Value>
    </Setting>
    <Setting Name="MaxActionNumberTextBox" Type="System.Int32" Scope="User">
      <Value Profile="(Default)">0</Value>
    </Setting>
    <Setting Name="StatusComboBox" Type="System.String" Scope="User">
      <Value Profile="(Default)" />
    </Setting>
    <Setting Name="RarityComboBox" Type="System.String" Scope="User">
      <Value Profile="(Default)" />
    </Setting>
    <Setting Name="WeaponTextBox" Type="System.String" Scope="User">
      <Value Profile="(Default)" />
    </Setting>
    <Setting Name="POITextBox" Type="System.String" Scope="User">
      <Value Profile="(Default)" />
    </Setting>
    <Setting Name="IsBotFilter" Type="System.Boolean" Scope="User">
      <Value Profile="(Default)">True</Value>
    </Setting>
    <Setting Name="IsTeamFilter" Type="System.Boolean" Scope="User">
      <Value Profile="(Default)">True</Value>
    </Setting>
    <Setting Name="IsAnonFilter" Type="System.Boolean" Scope="User">
      <Value Profile="(Default)">True</Value>
    </Setting>
    <Setting Name="FileNameFilter" Type="System.String" Scope="User">
      <Value Profile="(Default)" />
    </Setting>
    <Setting Name="ReplayDateFilter" Type="System.DateTime" Scope="User">
      <Value Profile="(Default)" />
    </Setting>
    <Setting Name="DisplayNameFilter" Type="System.String" Scope="User">
      <Value Profile="(Default)" />
    </Setting>
    <Setting Name="ActionerFilter" Type="System.String" Scope="User">
      <Value Profile="(Default)" />
    </Setting>
    <Setting Name="ActioneeFilter" Type="System.String" Scope="User">
      <Value Profile="(Default)" />
    </Setting>
  </Settings>
</SettingsFile>

================
File: Resources\Colors.xaml
================
<ResourceDictionary xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation" xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml">

    <Color x:Key="BackgroundColor">#0a070e</Color>
    <Color x:Key="foregroundColor">#ffffff</Color>
    <Color x:Key="BorderColor">#222127</Color>
    <Color x:Key="ShadowColor">#151519</Color>
    <Color x:Key="ShadowBorderColor">#141417</Color>

    <Color x:Key="PrimaryColor">#2d9aff</Color>
    <Color x:Key="SuccessColor">#01cbb1</Color>
    <Color x:Key="DangerColor">#fcc841</Color>
    <Color x:Key="ErrorColor">#c5432d</Color>

    <Color x:Key="PrimaryBackgroundColor">#1c3e6c</Color>
    <Color x:Key="SuccessBackgroundColor">#02554d</Color>
    <Color x:Key="DangerBackgroundColor">#664526</Color>
    <Color x:Key="ErrorBackgroundColor">#40211f</Color>

    <Color x:Key="PrimaryBorderColor">#2a93ef</Color>
    <Color x:Key="SuccessBorderColor">#17eecb</Color>
    <Color x:Key="DangerBorderColor">#fcc841</Color>
    <Color x:Key="ErrorBorderColor">#c5432d</Color>

    <SolidColorBrush x:Key="Background" Color="{StaticResource BackgroundColor}" />
    <SolidColorBrush x:Key="foreground" Color="{StaticResource foregroundColor}" />
    <SolidColorBrush x:Key="Border" Color="{StaticResource BorderColor}" />
    <SolidColorBrush x:Key="Shadow" Color="{StaticResource ShadowColor}" />
    <SolidColorBrush x:Key="ShadowBorder" Color="{StaticResource ShadowBorderColor}" />

    <SolidColorBrush x:Key="Primary" Color="{StaticResource PrimaryColor}" />
    <SolidColorBrush x:Key="Success" Color="{StaticResource SuccessColor}" />
    <SolidColorBrush x:Key="Danger" Color="{StaticResource DangerColor}" />
    <SolidColorBrush x:Key="Error" Color="{StaticResource ErrorColor}" />

    <SolidColorBrush x:Key="PrimaryBackground" Color="{StaticResource PrimaryBackgroundColor}" />
    <SolidColorBrush x:Key="SuccessBackground" Color="{StaticResource SuccessBackgroundColor}" />
    <SolidColorBrush x:Key="DangerBackground" Color="{StaticResource DangerBackgroundColor}" />
    <SolidColorBrush x:Key="ErrorBackground" Color="{StaticResource ErrorBackgroundColor}" />

    <SolidColorBrush x:Key="PrimaryBorder" Color="{StaticResource PrimaryBorderColor}" />
    <SolidColorBrush x:Key="SuccessBorder" Color="{StaticResource SuccessBorderColor}" />
    <SolidColorBrush x:Key="DangerBorder" Color="{StaticResource DangerBorderColor}" />
    <SolidColorBrush x:Key="ErrorBorder" Color="{StaticResource ErrorBorderColor}" />

    <SolidColorBrush x:Key="IconBackground" Color="#161618" />

</ResourceDictionary>

================
File: Resources\Converters.cs
================
using System;
using System.Collections.Generic;
using System.Globalization;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using System.Windows.Data;
using System;
using MaterialDesignThemes.Wpf;
using System.Windows;
using System.Windows.Media;



namespace SQLiteViewer.Resources
{
    

    public class ScoreToColorConverter : IValueConverter
    {
        public object Convert(object value, Type targetType, object parameter, CultureInfo culture)
        {
            if (value is double score)
            {
                if (score <= 30)
                    return (Brush)Application.Current.FindResource("Error");
                else if (score <= 70)
                    return (Brush)Application.Current.FindResource("Danger");
                else
                    return (Brush)Application.Current.FindResource("Success");
            }
            return Brushes.Transparent;
        }

        public object ConvertBack(object value, Type targetType, object parameter, CultureInfo culture)
        {
            throw new NotImplementedException();
        }
    }

    public class BooleanToPackIconKindConverter : IValueConverter
    {
        public PackIconKind TrueIcon { get; set; } = PackIconKind.Star;
        public PackIconKind FalseIcon { get; set; } = PackIconKind.StarOutline;

        public object Convert(object value, Type targetType, object parameter, CultureInfo culture)
        {
            if (value is bool boolValue)
            {
                return boolValue ? TrueIcon : FalseIcon;
            }
            return FalseIcon;
        }

        public object ConvertBack(object value, Type targetType, object parameter, CultureInfo culture)
        {
            throw new NotImplementedException();
        }
    }

    public class HalfValueConverter : IValueConverter

    {
        public object Convert(object value, Type targetType, object parameter, CultureInfo culture)
        {
            if (value is double doubleValue)
            {
                return doubleValue / 2;
            }
            return value;
        }

        public object ConvertBack(object value, Type targetType, object parameter, CultureInfo culture)
        {
            if (value is double doubleValue)
            {
                return doubleValue * 2;
            }
            return value;
        }
    }
    public class RectConverter : IMultiValueConverter
    {
        public object Convert(object[] values, Type targetType, object parameter, CultureInfo culture)
        {
            if (values.Length == 2 && values[0] is double width && values[1] is double height)
            {
                return new Rect(0, 0, width, height);
            }
            return new Rect(0, 0, 0, 0);
        }

        public object[] ConvertBack(object value, Type[] targetTypes, object parameter, CultureInfo culture)
        {
            throw new NotImplementedException();
        }
    }
    internal class Converters
    {
    }

}

================
File: Resources\Styles.xaml
================
<ResourceDictionary
    xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
    xmlns:materialDesign="http://materialdesigninxaml.net/winfx/xaml/themes"
    xmlns:wpf="clr-namespace:MaterialDesignThemes.Wpf;assembly=MaterialDesignThemes.Wpf">

    <Style x:Key="TransitioningUserControl" TargetType="UserControl">
        <Setter Property="Opacity" Value="0" />
        <Style.Triggers>
            <EventTrigger RoutedEvent="UserControl.Loaded">
                <BeginStoryboard>
                    <Storyboard>
                        <DoubleAnimation
                            Storyboard.TargetProperty="Opacity"
                            From="0"
                            To="1"
                            Duration="0:0:0" />
                        <ThicknessAnimation
                            Storyboard.TargetProperty="Margin"
                            From="100,0,0,0"
                            To="0"
                            Duration="0:0:0" />
                    </Storyboard>
                </BeginStoryboard>
            </EventTrigger>
        </Style.Triggers>
    </Style>

    <Style TargetType="WrapPanel">
        <Setter Property="Margin" Value="30,0" />
    </Style>
    <!--  Image  -->
    <Style x:Key="ImageStyle" TargetType="Image">
        <Setter Property="HorizontalAlignment" Value="Center" />
        <Setter Property="VerticalAlignment" Value="Center" />
        <Setter Property="RenderOptions.BitmapScalingMode" Value="HighQuality" />
    </Style>

    <!--  Button Style  -->
    <Style
        x:Key="PrimaryButtonStyle"
        BasedOn="{StaticResource MaterialDesignRaisedButton}"
        TargetType="Button">
        <Setter Property="Width" Value="90" />
        <Setter Property="Height" Value="26" />
        <Setter Property="Background" Value="#FCC841" />
        <Setter Property="BorderBrush" Value="Transparent" />
        <Setter Property="Foreground" Value="{StaticResource foreground}" />
        <Setter Property="BorderThickness" Value="0" />
        <Setter Property="materialDesign:ButtonAssist.CornerRadius" Value="15" />
        <Setter Property="HorizontalAlignment" Value="Center" />
        <Setter Property="VerticalAlignment" Value="Center" />
        <Setter Property="Margin" Value="0" />
        <Setter Property="FontSize" Value="10" />
        <Setter Property="FontWeight" Value="Medium" />
    </Style>

    <Style x:Key="IconStyle" TargetType="materialDesign:PackIcon">
        <Setter Property="Width" Value="23" />
        <Setter Property="Height" Value="23" />
        <Setter Property="Margin" Value="0" />
        <Setter Property="HorizontalAlignment" Value="Center" />
        <Setter Property="VerticalAlignment" Value="Center" />
        <Setter Property="Foreground" Value="{StaticResource foreground}" />
    </Style>
    <!--  New Button Style  -->
    <Style
        x:Key="OutLineButtonStyle"
        BasedOn="{StaticResource MaterialDesignRaisedButton}"
        TargetType="Button">
        <Setter Property="Width" Value="90" />
        <Setter Property="Height" Value="26" />
        <Setter Property="Background" Value="Transparent" />
        <Setter Property="BorderBrush" Value="#222127" />
        <Setter Property="BorderThickness" Value="1" />
        <Setter Property="FontSize" Value="10" />
        <Setter Property="Foreground" Value="{Binding BorderBrush, RelativeSource={RelativeSource Self}}" />
        <Setter Property="materialDesign:ButtonAssist.CornerRadius" Value="15" />
        <Setter Property="HorizontalAlignment" Value="Left" />
        <Setter Property="VerticalAlignment" Value="Top" />
    </Style>
    <Style
        x:Key="StarButtonStyle"
        BasedOn="{StaticResource MaterialDesignRaisedButton}"
        TargetType="Button">
        <Setter Property="Width" Value="25" />
        <Setter Property="Height" Value="25" />
        <Setter Property="Margin" Value="20" />
        <Setter Property="Padding" Value="0" />
        <Setter Property="Background" Value="Transparent" />
        <Setter Property="BorderBrush" Value="Transparent" />
        <Setter Property="BorderThickness" Value="0" />
        <Setter Property="materialDesign:ButtonAssist.CornerRadius" Value="25" />
        <Setter Property="HorizontalAlignment" Value="Right" />
        <Setter Property="VerticalAlignment" Value="Center" />
    </Style>

    <!--  Ellipse Style  -->
    <Style x:Key="CustomEllipseStyle" TargetType="Ellipse">
        <Setter Property="Width" Value="18" />
        <Setter Property="Height" Value="18" />
        <Setter Property="Fill" Value="#5AC550" />
        <Setter Property="HorizontalAlignment" Value="Left" />
        <Setter Property="VerticalAlignment" Value="Top" />
    </Style>

    <Style
        x:Key="ToggleStyle"
        BasedOn="{StaticResource MaterialDesignSwitchToggleButton}"
        TargetType="ToggleButton">
        <Setter Property="Width" Value="50" />
        <!--<Setter Property="Height" Value="26"/>-->
        <Setter Property="HorizontalAlignment" Value="Center" />
        <Setter Property="VerticalAlignment" Value="Center" />
        <Setter Property="materialDesign:ToggleButtonAssist.SwitchTrackOnBackground" Value="{StaticResource Success}" />
        <Setter Property="Background" Value="{StaticResource foreground}" />
        <Setter Property="materialDesign:ToggleButtonAssist.SwitchTrackOffBackground" Value="#373735" />
        <Setter Property="materialDesign:ToggleButtonAssist.OnContent" Value="" />
    </Style>
    <Style
        x:Key="ComboStyle"
        BasedOn="{StaticResource MaterialDesignOutlinedComboBox}"
        TargetType="ComboBox">
        <Setter Property="Width" Value="auto" />
        <Setter Property="Height" Value="auto" />
        <Setter Property="MinWidth" Value="80" />
        <Setter Property="MinHeight" Value="50" />
        <Setter Property="Foreground" Value="{StaticResource foreground}" />
        <Setter Property="HorizontalAlignment" Value="Center" />
        <Setter Property="VerticalAlignment" Value="Center" />
        <Setter Property="HorizontalContentAlignment" Value="Center" />
        <Setter Property="materialDesign:ThemeAssist.Theme" Value="Dark" />
    </Style>

    <!--  H1 Style  -->

    <Style x:Key="H0Style" TargetType="TextBlock">
        <Setter Property="FontFamily" Value="{DynamicResource GilroyFont}" />
        <Setter Property="FontWeight" Value="ExtraBold" />
        <Setter Property="FontSize" Value="56" />
        <Setter Property="Foreground" Value="{StaticResource foreground}" />
        <Setter Property="HorizontalAlignment" Value="Left" />
        <Setter Property="VerticalAlignment" Value="Center" />
        <Setter Property="Visibility" Value="Collapsed" />
    </Style>
    <Style x:Key="H1Style" TargetType="TextBlock">
        <Setter Property="Width" Value="auto" />
        <Setter Property="FontFamily" Value="{DynamicResource GilroyFont}" />
        <Setter Property="FontWeight" Value="ExtraBold" />
        <Setter Property="FontSize" Value="26" />
        <Setter Property="Foreground" Value="{StaticResource foreground}" />
        <Setter Property="HorizontalAlignment" Value="Left" />
        <Setter Property="VerticalAlignment" Value="Center" />
        <Setter Property="Text" Value="Welcome back, Aymen" />
        <Setter Property="Margin" Value="10" />
    </Style>

    <Style
        x:Key="TextBoxStyle"
        BasedOn="{StaticResource MaterialDesignOutlinedTextBox}"
        TargetType="TextBox">
        <Setter Property="Width" Value="200" />
        <Setter Property="Height" Value="80" />
        <Setter Property="BorderThickness" Value="3" />
    </Style>
    <!--  H2 Style  -->
    <Style x:Key="H2Style" TargetType="TextBlock">
        <Setter Property="Width" Value="auto" />
        <Setter Property="FontFamily" Value="{DynamicResource GilroyFont}" />
        <Setter Property="FontWeight" Value="Bold" />
        <Setter Property="FontSize" Value="22" />
        <Setter Property="Foreground" Value="{StaticResource foreground}" />
        <Setter Property="HorizontalAlignment" Value="Left" />
        <Setter Property="VerticalAlignment" Value="Top" />
        <Setter Property="TextAlignment" Value="Center" />
        <Setter Property="Text" Value="Optimize Now" />
    </Style>

    <Style
        x:Key="ScrollStyle"
        BasedOn="{StaticResource MaterialDesignScrollViewer}"
        TargetType="ScrollViewer">
        <Setter Property="VerticalScrollBarVisibility" Value="Auto" />
        <Setter Property="HorizontalScrollBarVisibility" Value="Disabled" />
        <Setter Property="Padding" Value="0,0,0,20" />
    </Style>
    <Style BasedOn="{StaticResource MaterialDesignScrollBar}" TargetType="ScrollBar">
        <Setter Property="materialDesign:ScrollBarAssist.ButtonsVisibility" Value="Collapsed" />
        <Setter Property="materialDesign:ScrollBarAssist.ThumbCornerRadius" Value="5" />
        <Setter Property="materialDesign:ScrollBarAssist.ThumbWidth" Value="5" />
        <Setter Property="materialDesign:ScrollBarAssist.ThumbHeight" Value="5" />
        <Setter Property="materialDesign:ThemeAssist.Theme" Value="Dark" />
        <Setter Property="Background" Value="Transparent" />
        <Setter Property="Width" Value="5" />
        <Setter Property="MinWidth" Value="0" />
        <Setter Property="Margin" Value="0,0,10,0" />
    </Style>

    <!--  Line 3 Style  -->
    <Style x:Key="H3Style" TargetType="TextBlock">
        <Setter Property="Width" Value="auto" />
        <Setter Property="Height" Value="27" />
        <Setter Property="Margin" Value="10,0" />
        <Setter Property="FontFamily" Value="{DynamicResource PoppinsFont}" />
        <Setter Property="FontWeight" Value="Regular" />
        <Setter Property="FontSize" Value="18" />
        <Setter Property="LineHeight" Value="27" />
        <Setter Property="Foreground" Value="{StaticResource foreground}" />
        <Setter Property="Opacity" Value="1" />
        <Setter Property="HorizontalAlignment" Value="Left" />
        <Setter Property="VerticalAlignment" Value="Center" />
        <Setter Property="TextWrapping" Value="Wrap" />
    </Style>

    <!--  H4 Style  -->
    <Style x:Key="H4Style" TargetType="TextBlock">
        <Setter Property="FontFamily" Value="{DynamicResource PoppinsFont}" />
        <Setter Property="FontWeight" Value="SemiBold" />
        <Setter Property="FontSize" Value="14" />
        <Setter Property="Foreground" Value="{StaticResource foreground}" />
        <Setter Property="HorizontalAlignment" Value="Left" />
        <Setter Property="VerticalAlignment" Value="Top" />
        <Setter Property="TextAlignment" Value="Center" />
        <Setter Property="Text" Value="" />
    </Style>
    <!--  H5 Style  -->
    <!--  H5 Style  -->
    <Style x:Key="H5Style" TargetType="TextBlock">
        <Setter Property="FontFamily" Value="{DynamicResource PoppinsFont}" />
        <Setter Property="FontWeight" Value="Regular" />
        <Setter Property="FontSize" Value="10" />
        <Setter Property="Foreground" Value="{StaticResource foreground}" />
        <Setter Property="TextWrapping" Value="Wrap" />
        <Setter Property="HorizontalAlignment" Value="Center" />
        <Setter Property="VerticalAlignment" Value="Center" />
        <Setter Property="Text" Value="Apr 24, 2024" />
    </Style>

    <Style x:Key="IconBorderStyle" TargetType="Border">
        <Setter Property="Width" Value="56" />
        <Setter Property="Height" Value="56" />
        <Setter Property="Margin" Value="20,10" />
        <Setter Property="BorderThickness" Value="0" />
        <Setter Property="CornerRadius" Value="56" />
        <Setter Property="Cursor" Value="Hand" />
        <Setter Property="Background" Value="{StaticResource Border}" />
    </Style>
    <!--  Line Style  -->
    <!--<Style x:Key="LineStyle" TargetType="Rectangle">
        <Setter Property="Width" Value="933"/>
        <Setter Property="Height" Value="0"/>
        <Setter Property="Stroke" Value="#222127"/>
        <Setter Property="StrokeThickness" Value="2.5"/>
        <Setter Property="HorizontalAlignment" Value="Center"/>
        <Setter Property="VerticalAlignment" Value="Top"/>
    </Style>-->

    <!--  Line Style  -->
    <!--
    <Style x:Key="LineStyle2" TargetType="Line">
        <Setter Property="X1" Value="0"/>
        <Setter Property="X2" Value="933"/>
        <Setter Property="Y1" Value="0"/>
        <Setter Property="Y2" Value="0"/>
        <Setter Property="Stroke" Value="#222127"/>
        <Setter Property="StrokeThickness" Value="2.5"/>
        <Setter Property="HorizontalAlignment" Value="Center"/>
        <Setter Property="VerticalAlignment" Value="Top"/>
    </Style>-->
    <Style x:Key="RoundedLineStyle" TargetType="Border">
        <Setter Property="Width" Value="auto" />
        <!--  Adjust the width as needed  -->
        <Setter Property="Height" Value="2" />
        <!--  Set the height of the line  -->
        <Setter Property="Background" Value="#222127" />
        <Setter Property="CornerRadius" Value="2.5" />
        <!--  Rounded ends with radius of half the height  -->
        <Setter Property="HorizontalAlignment" Value="Stretch" />
        <Setter Property="VerticalAlignment" Value="Top" />
        <Setter Property="Margin" Value="20,0,20,20" />
    </Style>

    <Style x:Key="BorderStyle" TargetType="Border">
        <Setter Property="Width" Value="175" />
        <Setter Property="Height" Value="205" />
        <Setter Property="Margin" Value="10" />
        <Setter Property="BorderThickness" Value="2" />
        <Setter Property="CornerRadius" Value="30" />
        <Setter Property="Cursor" Value="Hand" />
    </Style>
    <Style x:Key="BorderTextStyle" TargetType="Border">
        <Setter Property="MinWidth" Value="90" />
        <Setter Property="Height" Value="26" />
        <Setter Property="Margin" Value="10" />
        <Setter Property="BorderThickness" Value="0" />
        <Setter Property="CornerRadius" Value="15" />
        <Setter Property="Background" Value="{StaticResource Border}" />
        <Setter Property="HorizontalAlignment" Value="Right" />
        <Setter Property="VerticalAlignment" Value="Bottom" />
    </Style>

    <Style
        x:Key="DataGridStyle"
        BasedOn="{StaticResource MaterialDesignDataGrid}"
        TargetType="DataGrid">
        <Setter Property="Margin" Value="10" />
        <Setter Property="RowBackground" Value="{StaticResource MaterialDesignDarkSeparatorBackground}" />
        <Setter Property="AlternatingRowBackground" Value="{StaticResource Success}" />
        <Setter Property="AutoGenerateColumns" Value="False" />
        <Setter Property="HorizontalScrollBarVisibility" Value="Auto" />
        <Setter Property="Background" Value="{StaticResource Shadow}" />
        <Setter Property="Foreground" Value="{StaticResource foreground}" />
        <Setter Property="EnableRowVirtualization" Value="True" />
        <Setter Property="EnableColumnVirtualization" Value="True" />
        <Setter Property="IsReadOnly" Value="True" />
        <Setter Property="RowHeight" Value="40" />
        <Setter Property="SelectionMode" Value="Single" />
        <Setter Property="SelectionUnit" Value="Cell" />
    </Style>
    <Style
        x:Key="HeaderStyle"
        BasedOn="{StaticResource MaterialDesignDataGridColumnHeader}"
        TargetType="DataGridColumnHeader">
        <Setter Property="Height" Value="50" />
        <Setter Property="Background" Value="{StaticResource PrimaryBackground}" />
        <Setter Property="BorderBrush" Value="{StaticResource PrimaryBorder}" />
    </Style>
    <Style
        x:Key="RowStyle"
        BasedOn="{StaticResource MaterialDesignDataGridRow}"
        TargetType="DataGridRow">
        <Setter Property="Height" Value="40" />
    </Style>
    <Style
        x:Key="CellStyle"
        BasedOn="{StaticResource MaterialDesignDataGridCell}"
        TargetType="DataGridCell">
        <Setter Property="Height" Value="40" />
        <Setter Property="IsManipulationEnabled" Value="False" />
    </Style>

</ResourceDictionary>

================
File: Templates\IconCard.xaml
================
<UserControl
    x:Class="SQLiteViewer.Templates.IconCard"
    xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
    xmlns:d="http://schemas.microsoft.com/expression/blend/2008"
    xmlns:local="clr-namespace:SQLiteViewer.Templates"
    xmlns:materialDesign="http://materialdesigninxaml.net/winfx/xaml/themes"
    xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
    d:DesignHeight="450"
    d:DesignWidth="800"
    mc:Ignorable="d">
    <Border
        x:Name="BorderIcon"
        Background="Transparent"
        MouseLeftButtonDown="Border_MouseLeftButtonDown"
        Style="{StaticResource IconBorderStyle}">
        <Border.Triggers>
            <EventTrigger RoutedEvent="Border.MouseEnter">
                <BeginStoryboard>
                    <Storyboard>
                        <DoubleAnimation
                            Storyboard.TargetName="ScaleIcon"
                            Storyboard.TargetProperty="ScaleX"
                            To="1.25"
                            Duration="0:0:0.2" />
                        <DoubleAnimation
                            Storyboard.TargetName="ScaleIcon"
                            Storyboard.TargetProperty="ScaleY"
                            To="1.25"
                            Duration="0:0:0.2" />
                    </Storyboard>
                </BeginStoryboard>
            </EventTrigger>
            <EventTrigger RoutedEvent="Border.MouseLeave">
                <BeginStoryboard>
                    <Storyboard>
                        <DoubleAnimation
                            Storyboard.TargetName="ScaleIcon"
                            Storyboard.TargetProperty="ScaleX"
                            To="1"
                            Duration="0:0:0.2" />
                        <DoubleAnimation
                            Storyboard.TargetName="ScaleIcon"
                            Storyboard.TargetProperty="ScaleY"
                            To="1"
                            Duration="0:0:0.2" />
                    </Storyboard>
                </BeginStoryboard>
            </EventTrigger>
        </Border.Triggers>
        <Image
            x:Name="ImageIcon"
            Width="23"
            Height="23"
            Margin="0"
            HorizontalAlignment="Center"
            VerticalAlignment="Center"
            RenderTransformOrigin="0.5, 0.5"
            Source="{Binding ImageSource}">
            <Image.RenderTransform>
                <ScaleTransform x:Name="ScaleIcon" ScaleX="1" ScaleY="1" />
            </Image.RenderTransform>
        </Image>
    </Border>
</UserControl>

================
File: Templates\IconCard.xaml.cs
================
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using System.Windows;
using System.Windows.Controls;
using System.Windows.Data;
using System.Windows.Documents;
using System.Windows.Input;
using System.Windows.Media;
using System.Windows.Media.Imaging;
using System.Windows.Navigation;
using System.Windows.Shapes;
using MaterialDesignThemes.Wpf;

namespace SQLiteViewer.Templates
{
    /// <summary>
    /// Interaction logic for IconCard.xaml
    /// </summary>
    public partial class IconCard : UserControl
    {
        public ImageSource? ImageSource { get; set; }
        public event EventHandler? Navigate;
        public IconCard()
        {
            InitializeComponent();
            this.DataContext = this;
        }
        private void Border_MouseLeftButtonDown(object sender, MouseButtonEventArgs e)
        {
            Navigate?.Invoke(this, EventArgs.Empty);

        }
        public bool IsSelected
        {
            get { return (bool)GetValue(IsSelectedProperty); }
            set { SetValue(IsSelectedProperty, value); }
        }

        public static readonly DependencyProperty IsSelectedProperty =
            DependencyProperty.Register("IsSelected", typeof(bool), typeof(IconCard), new PropertyMetadata(false, OnIsSelectedChanged));

        private static void OnIsSelectedChanged(DependencyObject d, DependencyPropertyChangedEventArgs e)
        {
            var control = d as IconCard;
            var isselected = (bool)e.NewValue;
            if (isselected)
            {
                control.BorderIcon.Background = (Brush)Application.Current.FindResource("IconBackground");
            }
            else
            {
                control.BorderIcon.Background = Brushes.Transparent;
            }
        }
    }
}
